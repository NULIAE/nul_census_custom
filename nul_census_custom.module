<?php

/**
 * hook_node_view()
 */
function nul_census_custom_node_view($node, $view_mode, $langcode) {
  // If on census view mode run this js to fix up table styling
  if ($node->type == 'census') {
    drupal_add_js(drupal_get_path('module', 'nul_census_custom') . '/js/formFix.js');
  }
  // if on the main census node check to see if the related tabs are populated
  if ($node->type == 'test_clean_census') {
    $tabFields = array(
      'field_tab_1_contact_information' => array(
        'type' => "contact_information",
        'title' => "Contact Information",
      ),
      'field_tab_2_service_areas' => array(
        'type' => "service_areas",
        'title' => "Service Areas",
      ),
    );
    // check if any tabs are set up yet
    foreach ($tabFields as $field => $values) {
      // TODO also check in database if there is a tab node that references this census node
      if (!empty($node->$field)) {
        unset($tabFields[$field]);
      }
    }
    // If any tabs need to be set up do so here
    if (!empty($tabFields)) {
      $thisNode = node_load($node->nid);
      foreach ($tabFields as $field => $values) {
        $tabNodeId = nul_census_custom_node_create($node->nid, $tabFields[$field]['type'], $tabFields[$field]['title']);
        $thisNode->{$field}[LANGUAGE_NONE][] = array(
          'target_id' => $tabNodeId,
          'target_type' => 'node',
        );
      }
      node_save($thisNode);
      $path = current_path();
      drupal_goto($path);
    }
  }
}

/**
 * function to create related tabs
 * @param  int $censusId  nid of census the node is related to
 * @param  string $type     type of node being created
 * @param  string $title    title of node being created
 * @return int           node id of node created
 */
function nul_census_custom_node_create($censusId, $type, $title) {
  global $user;

  $node = new stdClass();
  $node->title = $title;
  $node->type = $type;
  // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
  node_object_prepare($node);
  $node->language = LANGUAGE_NONE;
  $node->uid = $user->uid;
  //(1 or 0): published or not
  $node->status = 1;
  //(1 or 0): promoted to front page
  $node->promote = 0;
  // 0 = comments disabled, 1 = read only, 2 = read/write
  $node->comment = 2;

  // Entity reference field
  $node->field_census_id[$node->language][] = array(
    'target_id' => $censusId,
    'target_type' => 'node',
  );
  // Term reference (taxonomy) field
  $node->field_sa_tab_status[$node->language][]['tid'] = 1;

  $node = node_submit($node);
  // Prepare node for saving
  node_save($node);
  return $node->nid;
}

/**
 * hook_form_alter()
 */
function nul_census_custom_form_alter(&$form, &$form_state, $form_id) {
  if (arg(0) == 'node' && arg(1) == 'add' && arg(2) == 'test-clean-census' && arg(3) >= 1) {
    $year = date("Y");
    //TODO look up contact org name of arg(3) and print instead of id
    $form['title']['#default_value'] = arg(3) . " " . $year . "Census";
    $form['field_year'][LANGUAGE_NONE][0]['value']['#default_value'] = $year;
    $form['field_affiliate_'][LANGUAGE_NONE][0]['value']['#default_value'] = arg(3);
    // hide fields to pick entity references
    if (empty($form['field_tab_1_contact_information'][LANGUAGE_NONE][0]['value']['#default_value'])) {
      $form['field_tab_1_contact_information']['#type'] = 'hidden';
      $form['field_tab_2_service_areas']['#type'] = 'hidden';
    }
  }
  if (!empty($form['#node']->type) && $form['#node']->type == 'census') {
    // float save to the bottom
    if (!empty($form['#node_edit_form']) && $form['#node_edit_form'] == TRUE) {
      $form['actions']['#weight'] = 1000;
    }
    // Add css file to style Census form in edit mode
    $form['#attached']['css'] = array(
      drupal_get_path('module', 'nul_census_custom') . '/css/editForm.css',
    );

    // make tooltips for all fields
    foreach ($form as $key => $value) {
      if (substr($key, 0, 6) == 'field_') {
        if (!empty($form[$key][LANGUAGE_NONE][0]['value']['#title'])) {
          $form[$key]['#attributes']['title'] = $form[$key][LANGUAGE_NONE][0]['value']['#title'];
        }
      }
    }
  }
}

/**
 * Implements hook_permission().
 */
function nul_census_custom_permission() {
  // TODO add permissions for tabs view/edit based on status
  return array(
    'edit census tabs with status submitted reviewed or review complete' => array(
      'title' => t('Edit census tabs with status submitted, reviewed or review complete'),
      'description' => t('Allows a user to edit census tabs with status submitted, reviewed or review complete.'),
    ),
    'edit census tabs with status resubmit' => array(
      'title' => t('Edit census tabs with status resubmit'),
      'description' => t('Allows a user to edit census tabs with status rresubmit.'),
    ),
  );
}
