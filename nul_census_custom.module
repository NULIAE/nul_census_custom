<?php

/**
 * Search Taxonomy by field on the taxonomy
 * @param  str $vocabMachineName  machine name of the vocabulary
 * @param  str $fieldName         name of field to search
 * @param  str $valueOfField      value to match on
 * @return obj                    term object
 */
function nul_census_custom_searchTaxonomyByField($vocabMachineName, $fieldName, $valueOfField) {
  $term = NULL;
  $query = new EntityFieldQuery();
  $vocabulary = taxonomy_vocabulary_machine_name_load($vocabMachineName);
  $query->entityCondition('entity_type', 'taxonomy_term')
    ->propertyCondition('vid', $vocabulary->vid)
    ->fieldCondition($fieldName, 'value', $valueOfField);
  $terms = $query->execute();
  if (!empty($terms['taxonomy_term'])) {
    foreach ($terms['taxonomy_term'] as $key => $termDetails) {
      $term = taxonomy_term_load($termDetails->tid);
    }
  }
  return $term;
}

function nul_census_custom_preprocess_views_view(&$vars) {
  $view = $vars['view'];
  // Make sure it's the correct view
  if ($view->name == 'full_census') {
    // add needed stylesheet
    drupal_add_css(drupal_get_path('module', 'nul_census_custom') . '/css/editForm.css');
  }
}

/**
 * hook_node_view()
 */
function nul_census_custom_node_view($node, $view_mode, $langcode) {
  if (!empty($node->type)) {
    if ($node->type == 'census') {
      // Check permissions, if do not have permission to edit census hide edit button
      if (!empty($node->field_census_status[LANGUAGE_NONE][0]['taxonomy_term']->name) && $node->nid == arg(1)) {
        $canEdit = nul_census_custom_check_status_permisions($node->field_census_status[LANGUAGE_NONE][0]['taxonomy_term']->name, 'census');
        if (!$canEdit) {
          drupal_add_js(drupal_get_path('module', 'nul_census_custom') . '/js/hideEdit.js');
          drupal_set_message("You do not have permission to edit this content at this stage", 'error');
        }
      }
    }
    if ($node->type !== 'census') {
      // If on emergency_relief_activities view mode run this js to fix up table styling
      if ($node->type == 'emergency_relief_activities') {
        drupal_add_js(drupal_get_path('module', 'nul_census_custom') . '/js/formFix.js');
      }
      // check if the content type is in the taxonomy for census tabs
      $termDetails = nul_census_custom_searchTaxonomyByField('census_tabs', 'field_content_type_machine_name', $node->type);
      // TODO delete this... these error messages this is really just for debugging while developing
      if (!$termDetails) {
        drupal_set_message(t('Not a Census Tab or unpopulated content type machine name on the taxonomy term'), 'error');
      }
      if ($termDetails) {
        // Add css file to tab in view mode
        $form['#attached']['css'] = array(
          drupal_get_path('module', 'nul_census_custom') . '/css/editForm.css',
        );
        // Check permissions, if do not have permission to edit complete tabs hide edit button
        if (!empty($node->field_tab_status[LANGUAGE_NONE][0]['taxonomy_term']->name) && $node->nid == arg(1) && $node->type !== 'census') {
          $canEdit = nul_census_custom_check_status_permisions($node->field_tab_status[LANGUAGE_NONE][0]['taxonomy_term']->name, 'tab');
          if (!$canEdit) {
            drupal_add_js(drupal_get_path('module', 'nul_census_custom') . '/js/hideEdit.js');
            drupal_set_message("You do not have permission to edit this content at this stage", 'error');
          }
        }
      }
    }

  }
}

/**
 * hook_form_alter()
 */
function nul_census_custom_form_alter(&$form, &$form_state, $form_id) {
  // float save to the bottom
  if (!empty($form['#node_edit_form']) && $form['#node_edit_form'] == TRUE) {
    $form['actions']['#weight'] = 10000;
  }
  // Setting up new censuss
  if (!empty($form['#node']->type)) {
    // TODO uncomment if below to hide parent census field
    // if (!empty($form['field_parent_census'])) {
    //   $form['field_parent_census']['#type'] = 'hidden';
    // }
    // Add css file to tab in edit mode
    $form['#attached']['css'] = array(
      drupal_get_path('module', 'nul_census_custom') . '/css/editForm.css',
    );
    if (arg(0) == 'node' && arg(1) == 'add' && arg(3) >= 1) {
      if (!empty(arg(2)) && arg(2) == 'census') {
        $year = date("Y");
        //TODO look up contact org name of arg(3) and print instead of id
        // Update and disable title field
        $form['title']['#default_value'] = arg(3) . " " . $year . " Census";
        $form['title']['#disabled'] = TRUE;
        // Update Year field and hide
        $form['field_year'][LANGUAGE_NONE][0]['value']['#default_value'] = $year;
        $form['field_year']['#disabled'] = TRUE;
        // Update affliate field and hide it
        $form['field_affiliate_'][LANGUAGE_NONE][0]['value']['#default_value'] = arg(3);
        $form['field_affiliate_']['#disabled'] = TRUE;
        // set default status to inclomplete
        $defaultStatus = array_search('Incomplete', $form['field_census_status'][LANGUAGE_NONE]['#options']);
        $form['field_census_status'][LANGUAGE_NONE]['#default_value'][] = $defaultStatus;
      }
      else {
        // Setting tab status to be incomplete since we are creating and we cant set default on the field since we can't export taxonomy terms with features
        if (!empty($form['field_tab_status'][LANGUAGE_NONE]['#options']) && array_search("Incomplete", $form['field_tab_status'][LANGUAGE_NONE]['#options'])) {
          $form['field_tab_status'][LANGUAGE_NONE]['#default_value'][0] = array_search("Incomplete", $form['field_tab_status'][LANGUAGE_NONE]['#options']);
        }
        // Get the name of the content type
        $types = node_type_get_names();
        if (!empty($types[$form['type']['#value']])) {
          if (!empty($form['field_parent_census'][LANGUAGE_NONE]['#options'][arg(3)])) {
            $form['field_parent_census'][LANGUAGE_NONE]['#default_value'] = arg(3);
          }
          if (!empty($form['field_program_area'][LANGUAGE_NONE]['#options'])) {
            foreach ($form['field_program_area'][LANGUAGE_NONE]['#options'] as $tid => $option) {
              if ($tid !== '_none') {
                $taxonomy_term = taxonomy_term_load($tid);
                if (!empty($taxonomy_term->field_content_type[LANGUAGE_NONE][0]['value']) && $taxonomy_term->field_content_type[LANGUAGE_NONE][0]['value'] == arg(4)) {
                  $form['field_program_area'][LANGUAGE_NONE]['#default_value'][] = $tid;
                  $form['field_program_area'][LANGUAGE_NONE]['#disabled'] = 1;
                }
              }
            }
          }
          // Check that its a tab content type by looking for the name in the vocabulary
          $vocabulary = taxonomy_vocabulary_machine_name_load('census_tabs');
          $censusTabs = taxonomy_get_tree($vocabulary->vid);
          foreach ($censusTabs as $key => $values) {
            if ($values->name == $types[$form['type']['#value']]) {
              // Set title to be name of content type
              $form['title']['#default_value'] = $types[$form['type']['#value']];
              $form['title']['#disabled'] = TRUE;
            }
          }
        }
      }
    }
    // Limit options for Program Type and Services Provided based on Program Area
    // Check we are on a content type of programs
    if (!empty($form['type']['#value']) && $form['type']['#value'] == 'programs') {
      $programArea = 0;
      // If in create mode check for program area default value as it has not been saved
      if (!empty($form['field_program_area'][LANGUAGE_NONE]['#default_value'])) {
        $programArea = $form['field_program_area'][LANGUAGE_NONE]['#default_value'][0];
      }
      // If in edit mode check for program area value
      if (!empty($form['field_program_area'][LANGUAGE_NONE]['#entity']->field_program_area[LANGUAGE_NONE][0]['tid'])) {
        $programArea = $form['field_program_area'][LANGUAGE_NONE]['#entity']->field_program_area[LANGUAGE_NONE][0]['tid'];
      }
      // If you find a program area
      if ($programArea > 0) {
        // Check the following fields options
        $fieldsToLimitByProgramArea = array(
          'field_service_provided',
          'field_program_types',
        );
        foreach ($fieldsToLimitByProgramArea as $key => $fieldName) {
          if (!empty($form[$fieldName][LANGUAGE_NONE]['#options'])) {
            foreach ($form[$fieldName][LANGUAGE_NONE]['#options'] as $optionId => $name) {
              if ($optionId > 0) {
                $term = taxonomy_term_load($optionId);
                if (intval($term->field_program_area[LANGUAGE_NONE][0]['tid']) !== intval($programArea)) {
                  unset($form[$fieldName][LANGUAGE_NONE]['#options'][$optionId]);
                }
              }
            }
          }
        }
      }
    }

    // make tooltips for all fields (most important for table fields)
    foreach ($form as $key => $value) {
      if (substr($key, 0, 6) == 'field_') {
        if (!empty($form[$key][LANGUAGE_NONE][0]['value']['#title'])) {
          $form[$key]['#attributes']['title'] = $form[$key][LANGUAGE_NONE][0]['value']['#title'];
        }
      }
    }
    // check if the content type is in the taxonomy for census tabs
    $termDetails = nul_census_custom_searchTaxonomyByField('census_tabs', 'field_content_type_machine_name', $form['#node']->type);
    if (!$termDetails) {
      if ($form['#node']->type == 'census') {
        drupal_set_message(t('Main Census Node'), 'success');
      }
      else {
        drupal_set_message(t('Not a Census Tab or unpopulated content type machine name on the taxonomy term'), 'error');
      }
    }
    if ($termDetails) {
      // hide title field on cenus tab content types in edit mode
      // $form['title']['#disabled'] = TRUE;
      // $form['title']['#type'] = 'hidden';
      // load totaling js
      drupal_add_js(drupal_get_path('module', 'nul_census_custom') . '/js/totaling.js');

      if (!empty($form['#node']->field_tab_status) && !empty($form['field_tab_status'][LANGUAGE_NONE]['#options'][$form['#node']->field_tab_status[LANGUAGE_NONE][0]['tid']]) && substr($form_id, 0, 7) !== 'comment') {
        // TODO check this is working
        $canEdit = nul_census_custom_check_status_permisions($form['field_tab_status'][LANGUAGE_NONE]['#options'][$form['#node']->field_tab_status[LANGUAGE_NONE][0]['tid']], 'tab');
        // If can't edit redirect to node in view mode.
        if (!$canEdit) {
          if (arg(0) == 'node' && arg(2) == 'edit') {
            drupal_goto(arg(0) . '/' . arg(1));
          }
          else {
            drupal_goto('403');
          }
        }
      }
    }
  }
}

/**
 * Implements hook_permission().
 */
function nul_census_custom_permission() {
  // TODO add permissions for tabs view/edit based on status
  return array(
    'edit census tabs with status submitted reviewed complete or review complete' => array(
      'title' => t('Edit census tabs with status submitted, complete, reviewed or review complete'),
      'description' => t('Allows a user to edit census tabs with status complete, submitted, reviewed or review complete.'),
    ),
    'edit census tabs with status resubmit' => array(
      'title' => t('Edit census tabs with status resubmit'),
      'description' => t('Allows a user to edit census tabs with status rresubmit.'),
    ),
    'edit census with status complete' => array(
      'title' => t('Edit census with status complete'),
      'description' => t('Allows a user to edit census with status complete'),
    ),
    'edit census with status submitted' => array(
      'title' => t('Edit census with status submitted'),
      'description' => t('Allows a user to edit census with status submitted'),
    ),
    'edit affiliate census and tabs' => array(
      'title' => t('Edit census with status submitted'),
      'description' => t('Allows a user to edit census with status submitted'),
    ),
  );
}

/**
 * Check permissions of user and status of tab
 * @param  string $status status of tab
 * @param string $contentType census or tab
 * @return boolean        can they edit or not
 */
function nul_census_custom_check_status_permisions($status, $contentType) {
  global $user;
  // IF user is an administrator they can edit whatever always
  if (in_array('administrator', $user->roles)) {
    $canEdit = TRUE;
  }
  // If user is not admin check permissions
  if (!in_array('administrator', $user->roles)) {
    if ($contentType == 'tab') {
      switch ($status) {
        case 'Incomplete':
          $canEdit = TRUE;
          break;

        case 'Complete':
          if (user_access('edit census tabs with status submitted reviewed complete or review complete')) {
            $canEdit = TRUE;
          }
          else {
            $canEdit = FALSE;
          }
          break;

        case 'Resubmit':
          if (user_access('edit census tabs with status resubmit')) {
            $canEdit = TRUE;
          }
          else {
            $canEdit = FALSE;
          }
          break;

        case 'Reviewed':
          if (user_access('edit census tabs with status submitted reviewed complete or review complete')) {
            $canEdit = TRUE;
          }
          else {
            $canEdit = FALSE;
          }
          break;

        case 'Reviewed Complete':
          if (user_access('edit census tabs with status submitted reviewed complete or review complete')) {
            $canEdit = TRUE;
          }
          else {
            $canEdit = FALSE;
          }
          break;

        case 'Submitted':
          if (user_access('edit census tabs with status submitted reviewed complete or review complete')) {
            $canEdit = TRUE;
          }
          else {
            $canEdit = FALSE;
          }
          break;

        default:
          $canEdit = FALSE;

          break;
      }
    }
    if ($contentType == 'census') {
      switch ($status) {
        case 'Incomplete':
          $canEdit = TRUE;
          break;

        case 'Complete':
          if (user_access('edit census with status complete')) {
            $canEdit = TRUE;
          }
          else {
            $canEdit = FALSE;
          }
          break;

        case 'Reviewed Complete':
          $canEdit = FALSE;
          break;

        case 'Submitted':
          if (user_access('edit census with status submitted')) {
            $canEdit = TRUE;
          }
          else {
            $canEdit = FALSE;
          }
          break;

        default:
          $canEdit = FALSE;

          break;
      }
    }
  }
  return $canEdit;
}

/**
 * Massages census_tab_menu view to show all related tabs
 */
function nul_census_custom_block_view_alter(&$data, $block) {
  // for the blocks that show the content tabs for the census or parent census pass correct contextual filters
  if ($block->delta == 'census_tab_menu-block' || $block->delta == 'census_tab_menu-block_1') {
    $displays = array(
      'census_tab_menu-block_1' => 'block_1',
      'census_tab_menu-block' => 'block',
    );
    $censusTabsVocabulary = taxonomy_vocabulary_machine_name_load('census_tabs');
    $censusTabs = taxonomy_get_tree($censusTabsVocabulary->vid);
    $result = '';
    // IF not on parent census look up the id of the parent census to pass as an argument to the view
    $parentCensusNid = 0;
    if ($block->delta == 'census_tab_menu-block') {
      $currentNid = $data['content']['#views_contextual_links_info']['views_ui']['view']->args[0];
      $currentNode = node_load($currentNid);
      $parentCensusNid = $currentNode->field_parent_census[LANGUAGE_NONE][0]['target_id'];
    }
    foreach ($censusTabs as $key => $object) {
      $term = taxonomy_term_load($object->tid);
      if (!empty($term->field_content_type_machine_name[LANGUAGE_NONE][0]['value'])) {
        if (!empty($data['content']['#views_contextual_links_info']['views_ui']['view']->args)) {
          $arguments = $data['content']['#views_contextual_links_info']['views_ui']['view']->args;
          $arguments[] = $term->field_content_type_machine_name[LANGUAGE_NONE][0]['value'];
          // machine names of content types have _ switch them to - to redirect properly
          $arguments[] = str_replace('_', '-', $term->field_content_type_machine_name[LANGUAGE_NONE][0]['value']);
          if ($parentCensusNid > 0) {
            $arguments[] = $parentCensusNid;
          }
          $view = views_get_view('census_tab_menu');
          $view->set_display($displays[$block->delta]);
          $view->set_arguments($arguments);
          $view->execute();
          $result .= $view->preview($displays[$block->delta]);
        }
      }
      $data['content']['#markup'] = $result;
    }
  }
}

function nul_census_custom_node_update($node) {
  // AGH #11267 If censis status changes to "completed" "approved" or "resubmit" send a notification email
  // If updating a census
  if ($node->type == 'census') {
    // if that census status field is populated
    if (!empty($node->field_census_status[LANGUAGE_NONE][0]['tid'])) {
      // and the status is not the same as it was originally (is being changed)
      if ($node->original->field_census_status[LANGUAGE_NONE][0]['tid'] !== $node->field_census_status[LANGUAGE_NONE][0]['tid']) {
        // look up the name of the status
        $term = taxonomy_term_load($node->field_census_status[LANGUAGE_NONE][0]['tid']);
        // check that the name is in the array of status we want to alert people of a status being changed to.
        if (!empty($term->name) && in_array($term->name, array('Complete', 'Approved', 'Resubmit'))) {

          // status has changed to Complete Approved or resubmit, we should email appropriate ppl
          $language = language_default();
          $params = array(
            'nid' => $node->nid,
            'status' => $term->name,
            'prev_status' => '',
            'title' => $node->title,
          );
          // get original status term name
          $ogStatusTerm = taxonomy_term_load($node->original->field_census_status[LANGUAGE_NONE][0]['tid']);
          if (!empty($ogStatusTerm->name)) {
            $params['prev_status'] = $ogStatusTerm->name;
          }
          drupal_mail('nul_census_custom', 'status_change', 'alice@aghstrategies.com', $language, $params, 'alice@aghstrategies.com', TRUE);
        }
      }
    }
  }
  // else {
    // TODO update tab status to complete if all required fields calucllated then update census status
    // TODO test that this will work when the last tab is changing to complete
    // If on a node with a parent census check the status of this node and all others
    // if (!empty($node->field_parent_census[LANGUAGE_NONE][0]['target_id'])) {
    //   // check status of parent census and update status if all tabs are completed
    //   $tabsCompleted = nul_census_custom_check_tab_statuses($node->field_parent_census[LANGUAGE_NONE][0]['target_id']);
    //   if ($tabsCompleted == 'yes') {
    //     $parentCensus = node_load($node->nid);
    //     $parentCensus->field_census_status['und'][0]['tid'] = 7;
    //     node_save($parentCensus);
    //   }
    // }

  // }
}
function nul_census_custom_node_submit($node, $form, &$form_state) {
  // change status if all fake required fields complete
  if (!empty($node->field_tab_status[LANGUAGE_NONE][0]['tid'])) {
    $currentTabStatus = taxonomy_term_load($node->field_tab_status[LANGUAGE_NONE][0]['tid']);
    if ($currentTabStatus->name == 'Incomplete') {
      // CHECK REQUIRED FIELDS
      $requiredToCompleteFieldsMachineNames = nul_census_custom_fake_required_fields();
      $allRequiredFieldsFilled = TRUE;
      foreach ($requiredToCompleteFieldsMachineNames as $machineName => $value) {
        if (empty($node->{$machineName}[LANGUAGE_NONE])) {
          $allRequiredFieldsFilled = FALSE;
        }
      }
      if ($allRequiredFieldsFilled) {
        $completeTerm = taxonomy_get_term_by_name('Complete', 'census_tab_status');
        $node->field_tab_status[LANGUAGE_NONE][0]['tid'] = key($completeTerm);
      }
    }
  }
}

function nul_census_custom_node_insert($node) {
  // AGH #11267 Sends an email when a node of type census is created
  // TODO talk to NUL about what info they want in this email. Is link enough? also who should the email go to?
  if ($node->type == 'census') {
    $language = language_default();
    $params = array(
      'nid' => $node->nid,
    );
    drupal_mail('nul_census_custom', 'census_created', 'alice@aghstrategies.com', $language, $params, 'alice@aghstrategies.com', TRUE);
  }
}

function nul_census_custom_mail($key, &$message, $params) {
  global $base_url;
  switch ($key) {
    case 'status_change':
      $link = $base_url . '/node/' . $params['nid'];
      $message['subject'] = "{$params['title']} Status Changed to {$params['status']}";
      $message['body'][] = "'{$params['title']}' Status Changed to {$params['status']} from {$params['prev_status']} see link below to visit this census: $link";
      drupal_set_message(t('Status Change email sent'), 'notice');
      break;

    case 'census_created':
      $link = $base_url . '/node/' . $params['nid'];
      $message['subject'] = "Census Created nid: {$params['nid']}";
      $message['body'][] = "Census Created nid: {$params['nid']} visit at $link";
      drupal_set_message(t('Census Created email sent'), 'notice');
      break;

    default:
      break;
  }
}

function nul_census_custom_fake_required_fields() {
  $fields = array(
    'field_advocacy_description' => 'civic_engagement',
    // machine names
  );
  return $fields;
}

// function nul_census_custom_check_tab_statuses($nid) {
//   // TODO check the status of the census before continuing to make sure we need to do all this
//   $parentCensus = node_load($nid);
//   if (!empty($parentCensus->field_census_status[LANGUAGE_NONE][0]['tid'])) {
//     $currentCensusStatus = taxonomy_term_load($parentCensus->field_census_status[LANGUAGE_NONE][0]['tid']);
//     if ($currentCensusStatus->name !== '') {
//
//     }
//   }
//   $tabsAllCompleted = 'yes';
//   // load census tab vocabulary
//   $censusTabsVocabulary = taxonomy_vocabulary_machine_name_load('census_tabs');
//   $censusTabs = taxonomy_get_tree($censusTabsVocabulary->vid);
//   // foreach thru each term in census tab vocab
//   foreach ($censusTabs as $key => $object) {
//     if (!empty($object->tid)) {
//       // load term
//       $term = taxonomy_term_load($object->tid);
//       // if there is a machine name content type for that term
//       if (!empty($term->field_content_type_machine_name[LANGUAGE_NONE][0]['value'])) {
//         $completeTerm = taxonomy_get_term_by_name('Complete', 'census_tab_status');
//         // search for node of that type AND parent census with NID passed to the function
//         $query = new EntityFieldQuery();
//         $query->entityCondition('entity_type', 'node')
//           ->entityCondition('bundle', $term->field_content_type_machine_name[LANGUAGE_NONE][0]['value'])
//           ->fieldCondition('field_parent_census', 'target_id', $nid)
//           ->fieldCondition('field_tab_status', 'tid', key($completeTerm));
//         $results = $query->execute();
//         // If even just one missing content type or with wrong status
//         if (empty($results['node'])) {
//           $tabsAllCompleted = 'no';
//         }
//       }
//     }
//   }
//   return $tabsAllCompleted;
// }
