<?php

module_load_include('inc', 'nul_census_custom', './nul_census_custom.utils');

/**
 * hook_preprocess_views_view()
 */
function nul_census_custom_preprocess_views_view(&$vars) {
  $view = $vars['view'];
  // Make sure it's the correct view
  if ($view->name == 'census_tab_menu') {
    drupal_add_css(
      'https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css',
      array('type' => 'external')
    );
  }
  if ($view->name == 'full_census' || $view->name == 'throwa') {
    // add needed stylesheet
    drupal_add_css(drupal_get_path('module', 'nul_census_custom') . '/css/editForm.css');
  }
}

/**
 * hook_node_view()
 */
function nul_census_custom_node_view($node, $view_mode, $langcode) {
  if (!empty($node->type)) {
    $nodeType = nul_census_custom_get_census_part($node->type);
    switch ($nodeType) {
      case 'census':
        drupal_add_css(drupal_get_path('module', 'nul_census_custom') . '/css/editForm.css');
        // If all tabs are reviewed and census is submitted and user has permission add button to mark census as review complete
        if (!empty($node->field_census_status[LANGUAGE_NONE][0]['taxonomy_term']->name) && $node->field_census_status[LANGUAGE_NONE][0]['taxonomy_term']->name == 'Submitted' && user_access('can mark census tabs resubmit and reviewed')) {
          // check that all tabs have status reviewed
          $tabsCompleted = nul_census_custom_check_tab_statuses($node->nid, '', 'Reviewed');
          if (!empty($tabsCompleted['complete']) && empty($tabsCompleted['notComplete'])) {
            drupal_add_js(array('nul_census_custom' => array('censuspart' => 'census')), array('type' => 'setting'));
            drupal_add_js(array('nul_census_custom' => array('nid' => $node->nid)), array('type' => 'setting'));
            drupal_add_js(drupal_get_path('module', 'nul_census_custom') . '/js/addButtons.js');
            if (arg(0) == 'node' && arg(1) > 0 && in_array(arg(2), array('ReviewComplete'))) {
              $censusCompleted = array($node->nid => 'does not matter');
              nul_census_custom_update_nodes_status_field($censusCompleted, 'Reviewed Complete', 'census');
              // Updating all related tabs
              nul_census_custom_update_nodes_status_field($tabsCompleted['complete'], 'Reviewed Complete', 'tab');
              drupal_set_message('Census saved as Review Complete', 'success');
              drupal_goto("node/" . arg(1));
            }
          }
        }
        break;

      case 'programs':
        // Add css file to programs in view mode
        drupal_add_css(drupal_get_path('module', 'nul_census_custom') . '/css/editForm.css');
        break;

      case 'tab':
        // If on emergency_relief_activities view mode run this js to fix up table styling
        if ($node->type == 'emergency_relief_activities') {
          drupal_add_js(drupal_get_path('module', 'nul_census_custom') . '/js/formFix.js');
        }
        $statusOfTab = NULL;
        if (!empty($node->field_tab_status[LANGUAGE_NONE][0]['taxonomy_term']->name)) {
          $statusOfTab = $node->field_tab_status[LANGUAGE_NONE][0]['taxonomy_term']->name;
        }
        elseif (!empty($node->field_tab_status[LANGUAGE_NONE][0]['tid']) && !empty(taxonomy_term_load($node->field_tab_status[LANGUAGE_NONE][0]['tid'])->name)) {
          $statusOfTab = taxonomy_term_load($node->field_tab_status[LANGUAGE_NONE][0]['tid'])->name;
        }
        if (!empty($statusOfTab) && !empty($node->field_parent_census[LANGUAGE_NONE][0]['target_id']) && !empty($node->nid)) {
          // IF on tab with status submitted and user has proper permissions add mark reviewed and resubmit buttons
          nul_census_custom_button_to_update_status($statusOfTab, 'Submitted', 'can mark census tabs resubmit and reviewed', 'tab', $node->nid, $node->field_parent_census[LANGUAGE_NONE][0]['target_id'], array('Reviewed', 'Resubmit'));
          // IF on tab with status incomplete and user has proper permissions add mark complete
          nul_census_custom_button_to_update_status($statusOfTab, 'Incomplete', 'can mark census tabs as complete', 'tabComplete', $node->nid, $node->field_parent_census[LANGUAGE_NONE][0]['target_id'], array('Complete'));
        }
        // Add css file to tab in view mode
        drupal_add_css(drupal_get_path('module', 'nul_census_custom') . '/css/editForm.css');
        // Check permissions, if do not have permission to edit complete tabs hide edit button
        if (!empty($statusOfTab) && $node->type !== 'census') {
          $perms = nul_census_custom_check_status_permisions($statusOfTab, 'tab', $node->nid);
          if ($perms['canResubmit'] && $statusOfTab == 'Resubmit') {
            // Add and process resubmit button
            nul_census_custom_button_to_update_status($statusOfTab, 'Resubmit', 'edit census tabs with status resubmit', 'resubmit', $node->nid, $node->field_parent_census[LANGUAGE_NONE][0]['target_id'], array('Submitted'));
          }
          $my_view = views_get_view('programs_for_program_area');
          if (is_object($my_view)) {
            $my_view->set_display('block');
            $my_view->set_arguments(array($node->nid, $node->nid));
            $my_view->pre_execute();
            $programs = $my_view->render('block');
          }
          $addAProgramLink = '';
          if (!empty($programs)) {
            if ($perms['canEdit'] || $perms['canResubmit']) {
              if (!empty($node->field_do_you_offer_programs_of_t[LANGUAGE_NONE][0]['value']) && $node->field_do_you_offer_programs_of_t[LANGUAGE_NONE][0]['value'] == 1) {
                $addAProgramLink = "<a class='button nulCensusButton' href='/node/add/programs/{$node->field_parent_census[LANGUAGE_NONE][0]['target_id']}/{$node->type}'>+ Add A Program</a>";
              }
            }
            $markup = "
            <div class='censusPrograms'>
              <h2>Programs</h2>
              $programs
              $addAProgramLink
            </div>";
            // TODO if on program details tab add programs to the bottom of the tab
            $node->content['programsForThisTab'] = array(
              '#markup' => $markup,
              '#weight' => -100,
            );
          }
        }
        break;

      default:
        # code...
        break;
    }
  }
}

/**
 * hook_form_alter()
 */
function nul_census_custom_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == "node_delete_confirm") {
    $form['#attached']['css'] = array(
      drupal_get_path('module', 'nul_census_custom') . '/css/editForm.css',
    );
  }
  if (!empty($form['type']['#value'])) {
    $nodeType = nul_census_custom_get_census_part($form['type']['#value']);
    switch ($nodeType) {
      case 'census':
        // If on Census node
        if ($form_id == 'census_node_form') {
          $form['#attached']['css'] = array(
            drupal_get_path('module', 'nul_census_custom') . '/css/editForm.css',
          );
          // Disable certifier field
          $form['field_survey_name_of_certifier']['#disabled'] = TRUE;
          // only allow users who have permission can certify census as complete to see that field
          if (!user_access('can certify census as complete')) {
            $form['field_survey_name_of_certifier']['#attributes']['class'][] = 'hide';
          }
          $completeTerm = array_search('Complete', $form['field_census_status'][LANGUAGE_NONE]['#options']);
          // Enable certifier field if user has permissions and the census is complete
          if (!empty($form['field_survey_name_of_certifier']) &&
          user_access('can certify census as complete') &&
          !empty($form['field_census_status'][LANGUAGE_NONE]['#entity']->field_census_status[LANGUAGE_NONE][0]['tid']) &&
          $form['field_census_status'][LANGUAGE_NONE]['#entity']->field_census_status[LANGUAGE_NONE][0]['tid'] == $completeTerm) {
            $form['field_survey_name_of_certifier']['#disabled'] = FALSE;
          }
          // if user does not have access to magic fields disable them so user cannot change them
          $fieldsToHideAndDisableOnCensus = array(
            'field_year',
            'field_affiliate_select',
            'field_census_status',
            'title',
            'field_legacy_census_id',
            'field_legacy_comments_contact',
          );
          nul_census_custom_hide_and_disable_fields($form, $fieldsToHideAndDisableOnCensus);
          // IF ON A CENSUS IN CREATE MODE
          if (
          arg(0) == 'node' &&
          arg(1) == 'add' &&
          !empty(arg(2)) &&
          arg(2) == 'census' &&
          arg(3) >= 1) {
            // set year to be current year
            $year = date("Y");
            $canCreate = nul_census_custom_census_creation_permissions(arg(3), $year);
            // If an affiliate id for which the logged in user has access to is found
            if ($canCreate['affiliateId'] >= 1 && !empty($form['field_affiliate_select'][LANGUAGE_NONE]['#options'][arg(3)])) {
              // look up display name
              $displayName = $form['field_affiliate_select'][LANGUAGE_NONE]['#options'][arg(3)];
              // make title field to be the name of the affliate and hide
              $form['title']['#default_value'] = $displayName . " " . $year . " Census";
              // Update Year field and disable
              $form['field_year'][LANGUAGE_NONE]['#default_value'][] = intval($year);
              // Update affliate select field
              $form['field_affiliate_select'][LANGUAGE_NONE]['#default_value'][] = $canCreate['affiliateId'];

              // $form['field_affiliate'][LANGUAGE_NONE][0]['value']['#default_value'] = $canCreate['affiliateId'];
              // $form['field_first_name'][LANGUAGE_NONE][0]['value']['#default_value'] = $displayName;
              // set default status to inclomplete
              $defaultStatus = array_search('Incomplete', $form['field_census_status'][LANGUAGE_NONE]['#options']);
              if (empty($form['field_census_status'][LANGUAGE_NONE]['#default_value'])) {
                $form['field_census_status'][LANGUAGE_NONE]['#default_value'][] = $defaultStatus;
              }
            }
          }
        }
        break;

      case 'programs':
        // IF ON PROGRAMS TAB
        // Check we are on a content type of programs
        if (!empty($form['type']['#value']) && $form['type']['#value'] == 'programs') {
          // if on a programs tab add a redirect to go to the program details tab on save
          $form['actions']['submit']['#submit'][] = 'nul_census_custom_redirect_to_program_details_tab';
          // Add css for styling tables
          $form['#attached']['css'] = array(
            drupal_get_path('module', 'nul_census_custom') . '/css/editForm.css',
          );
          // set parent census based on value in url
          if (!empty($form['field_parent_census'][LANGUAGE_NONE]['#options'][arg(3)])) {
            $form['field_parent_census'][LANGUAGE_NONE]['#default_value'] = arg(3);
          }
          // set program area if needed
          if (!empty($form['field_program_area'][LANGUAGE_NONE]['#options'])) {
            foreach ($form['field_program_area'][LANGUAGE_NONE]['#options'] as $tid => $option) {
              if ($tid !== '_none') {
                $taxonomy_term = taxonomy_term_load($tid);
                if (!empty($taxonomy_term->field_content_type[LANGUAGE_NONE][0]['value']) && $taxonomy_term->field_content_type[LANGUAGE_NONE][0]['value'] == arg(4)) {
                  $form['field_program_area'][LANGUAGE_NONE]['#default_value'][] = $tid;
                }
              }
            }
          }
          $programArea = 0;
          // If in create mode check for program area default value as it has not been saved
          if (!empty($form['field_program_area'][LANGUAGE_NONE]['#default_value'])) {
            $programArea = $form['field_program_area'][LANGUAGE_NONE]['#default_value'][0];
            // Show program area as text if the user does not have permission to set it
            if (!empty($form['field_program_area'][LANGUAGE_NONE]['#options'][$form['field_program_area'][LANGUAGE_NONE]['#default_value'][0]])) {
              $form['programAreaText'] = array(
                '#type' => 'markup',
                '#markup' => "<label>Program Area: " . $form['field_program_area'][LANGUAGE_NONE]['#options'][$form['field_program_area'][LANGUAGE_NONE]['#default_value'][0]] . "</label>",
                '#weight' => -10,
              );
            }
          }
          // If in edit mode check for program area value
          if (!empty($form['field_program_area'][LANGUAGE_NONE]['#entity']->field_program_area[LANGUAGE_NONE][0]['tid'])) {
            $programArea = $form['field_program_area'][LANGUAGE_NONE]['#entity']->field_program_area[LANGUAGE_NONE][0]['tid'];
          }
          $fieldsToHideAndDisableOnProgram = array(
            'field_parent_census',
            'field_legacy_program_id',

            // NOTE I think this field should be removed from programs because it is unnecessary
            'field_legacy_census_id',
          );
          // ALWAYS hide Program Area field
          $form['field_program_area']['#attributes']['class'][] = 'hide';

          // If you find a program area
          // Limit options for Program Type and Services Provided based on Program Area
          if ($programArea > 0) {
            // create array of tid's
            $servicesProvidedVocabulary = taxonomy_vocabulary_machine_name_load('services_provided');
            $servicesProvidedVocabulary = taxonomy_get_tree($servicesProvidedVocabulary->vid);
            $sortedOptions = array();
            foreach ($servicesProvidedVocabulary as $key => $value) {
              $programAreaOfOption = taxonomy_term_load($value->tid)->field_program_area[LANGUAGE_NONE][0]['tid'];
              if (!empty($programAreaOfOption)) {
                $sortedOptions[$programAreaOfOption][] = $value->tid;
              }
            }
            if (!empty($sortedOptions)) {
              drupal_add_js(array('nul_census_custom' => array('sorted' => $sortedOptions)), array('type' => 'setting'));
              drupal_add_js(drupal_get_path('module', 'nul_census_custom') . '/js/servicesProvided.js');
            }

            // Check the following fields options
            $fieldsToLimitByProgramArea = array(
              // 'field_service_provided',
              'field_program_types',
            );
            foreach ($fieldsToLimitByProgramArea as $key => $fieldName) {
              if (!empty($form[$fieldName][LANGUAGE_NONE]['#options'])) {
                foreach ($form[$fieldName][LANGUAGE_NONE]['#options'] as $optionId => $name) {
                  if ($optionId > 0) {
                    $term = taxonomy_term_load($optionId);
                    if (intval($term->field_program_area[LANGUAGE_NONE][0]['tid']) !== intval($programArea)) {
                      unset($form[$fieldName][LANGUAGE_NONE]['#options'][$optionId]);
                    }
                  }
                }
              }
              // IF no options for this program type hide the field
              if (count($form[$fieldName][LANGUAGE_NONE]['#options']) == 1 && !empty($form[$fieldName][LANGUAGE_NONE]['#options']['_none'])) {
                $fieldsToHideAndDisableOnProgram[] = $fieldName;
              }
            }
          }
          nul_census_custom_hide_and_disable_fields($form, $fieldsToHideAndDisableOnProgram);
        }
        break;

      case 'tab':
        if (!empty($form['#node']->type) && $form['#node']->type . '_node_form' == $form_id) {
          // AGH #11789 making revenue fields total
          if ($form['#node']->type == 'revenue') {
            drupal_add_js(drupal_get_path('module', 'nul_census_custom') . '/js/revenueTotal.js');
          }

          // If on program details tab add js to hide and show fields based on checkbox
          if (!empty($form['field_do_you_offer_programs_of_t'])) {
            drupal_add_js(drupal_get_path('module', 'nul_census_custom') . '/js/programDetailsTab.js');
          }
          // IF user does not have permission to edit this tab with this status redirect to home page
          if (!empty($form['#node']->field_tab_status) && !empty($form['field_tab_status'][LANGUAGE_NONE]['#options'][$form['#node']->field_tab_status[LANGUAGE_NONE][0]['tid']]) && substr($form_id, 0, 7) !== 'comment') {
            // TODO check this is working
            $perms = nul_census_custom_check_status_permisions($form['field_tab_status'][LANGUAGE_NONE]['#options'][$form['#node']->field_tab_status[LANGUAGE_NONE][0]['tid']], 'tab', $form['#node']->nid);
            // If can't edit redirect to node in view mode.
            if (!$perms['canEdit']) {
              if (arg(0) == 'node' && arg(2) == 'edit') {
                drupal_goto(arg(0) . '/' . arg(1));
              }
              else {
                drupal_goto('403');
              }
            }
          }
          // Add totaling js
          drupal_add_js(drupal_get_path('module', 'nul_census_custom') . '/js/totaling.js');
          // make tooltips for all fields (most important for table fields)
          foreach ($form as $key => $value) {
            if (substr($key, 0, 6) == 'field_') {
              if (!empty($form[$key][LANGUAGE_NONE][0]['value']['#title'])) {
                $form[$key]['#attributes']['title'] = $form[$key][LANGUAGE_NONE][0]['value']['#title'];
              }
            }
          }
          // float save to the bottom
          if (!empty($form['#node_edit_form']) && $form['#node_edit_form'] == TRUE) {
            $form['actions']['#weight'] = 10000;
          }
          // Add css file to tab in edit mode
          $form['#attached']['css'] = array(
            drupal_get_path('module', 'nul_census_custom') . '/css/editForm.css',
          );
          // if user does not have access to magic fields on tab disable them so user cannot change them
          $fieldsToHideAndDisableOnTab = array(
            'title',
            'field_parent_census',
            'field_tab_status',
            // 'field_program_area',

            // NOTE I think this field is unecessary
            'field_legacy_census_id',

            // Civic Engagement Tab
            'field_community_organizations',
            'field_comm_org_white_male',
            'field_comm_org_hispanic_male',
            'field_comm_org_asian_am_male',
            'field_comm_org_native_am_male',
            'field_comm_org_african_am_male',
            'field_comm_org_other_male',
            'field_comm_org_white_female',
            'field_comm_org_hispanic_female',
            'field_comm_org_asian_am_female',
            'field_comm_org_native_am_female',
            'field_comm_org_african_am_female',
            'field_comm_org_other_female',

            // Workforce Development Programs
            'field_legacy_work_sub_budget',
            'field_program_work_subsidiary',
            'field_program_work_sub_profit',
            'field_program_work_sub_ownership',
            'field_program_work_aff_profit',
            'field_program_work_sub_housing',
            'field_program_work_sub_health',
            'field_program_work_sub_business',
            'field_program_work_sub_workforce',

            // Volunteers/Members tab
            'field_guild_white',
            'field_guild_hispanic_latino',
            'field_guild_asian_american',
            'field_guild_native_american',
            'field_guild_african_american',
            'field_guild_other_heritage',
            'field_ypc_white',
            'field_ypc_hispanic_latino',
            'field_ypc_asian_american',
            'field_ypc_native_american',
            'field_ypc_african_american',
            'field_ypc_other_heritage',
            'field_aux_hispanic_latino',
            'field_aux_asian_american',
            'field_aux_native_american',
            'field_aux_african_american',
            'field_aux_other_heritage',

            // Emergency Relief Activities
            'field_legacy_relief_ed_imp',
            'field_legacy_relief_employ_impac',
            'field_legacy_relief_health_impac',
            'field_legacy_relief_civic_impact',
            'field_legacy_relief_justice_impa',
          );

          nul_census_custom_hide_and_disable_fields($form, $fieldsToHideAndDisableOnTab);
          // IF ON A TAB IN CREATE MODE
          if (
          arg(0) == 'node' &&
          arg(1) == 'add' &&
          !empty(arg(2)) &&
          arg(3) >= 1) {
            // look up affiliate associated with parent census
            $nodeAffiliate = nul_census_custom_get_affiliate_from_node(arg(3), 'census');
            $userAffiliate = nul_census_custom_get_affiliate_from_user();
            $canCreateTab = FALSE;
            if ($nodeAffiliate == $userAffiliate && user_access('can create census for own affiliate')) {
              $canCreateTab = TRUE;
            }
            if (user_access('can create census for any affiliate') || user_access('can edit magic census fields')) {
              $canCreateTab = TRUE;
            }
            if ($canCreateTab) {
              // Setting tab status to be incomplete since we are creating and we cant set default on the field since we can't export taxonomy terms with features
              if (!empty($form['field_tab_status'][LANGUAGE_NONE]['#options']) && array_search("Incomplete", $form['field_tab_status'][LANGUAGE_NONE]['#options'])) {
                $form['field_tab_status'][LANGUAGE_NONE]['#default_value'][0] = array_search("Incomplete", $form['field_tab_status'][LANGUAGE_NONE]['#options']);
              }
              // set parent census based on value in url
              if (!empty($form['field_parent_census'][LANGUAGE_NONE]['#options'][arg(3)])) {
                $form['field_parent_census'][LANGUAGE_NONE]['#default_value'] = arg(3);
              }
              // TODO have census part function return this object
              $censusTab = nul_census_custom_searchTaxonomyByField('census_tabs', 'field_content_type_machine_name', $form['type']['#value']);
              if ($censusTab->name) {
                $form['title']['#default_value'] = $censusTab->name;
              }
            }
            else {
              drupal_set_message('You do not have permission to create tabs for this census');
              drupal_goto("/node/" . arg(3));
            }
          }
        }
        break;

      default:
        # code...
        break;
    }
  }
}

/**
 * hook_permission().
 */
function nul_census_custom_permission() {
  // TODO add permissions for tabs view/edit based on status
  return array(
    'edit own affiliate censuses' => array(
      'title' => t('edit own affiliate census and tabs'),
      'description' => t('Allows a user to edit censuses where the affiliate id matches the affiliate on their civi contact record'),
    ),
    'edit all affiliate censuses' => array(
      'title' => t('edit all affiliate census and tabs'),
      'description' => t('Allows a user to edit any census'),
    ),
    'can create census for own affiliate' => array(
      'title' => t('can create census for own affiliate'),
      'description' => t('Allows a user to create a census for the affiliate on their contact record.'),
    ),
    'can create census for any affiliate' => array(
      'title' => t('can create census for any affiliate'),
      'description' => t('Allows a user to create a census for any affiliate'),
    ),
    'edit census tabs with status submitted reviewed complete or review complete' => array(
      'title' => t('Edit all census tabs with status submitted, complete, reviewed or review complete'),
      'description' => t('Allows a user to edit census tabs with status complete, submitted, reviewed or review complete.'),
    ),
    'edit census tabs with status resubmit' => array(
      'title' => t('Edit Affiliate census tabs with status resubmit'),
      'description' => t('Allows a user to edit census tabs with status rresubmit.'),
    ),
    //TODO update this permission right now these ppl cannot edit complete only incomplete
    'edit census with status complete' => array(
      'title' => t('Can edit a census with the status of complete (and its related tabs also with status complete)'),
      'description' => t('Permission for CEO to edit census while the census and its tabs have status complete'),
    ),
    'edit census with status submitted' => array(
      'title' => t('Edit All census with status submitted'),
      'description' => t('Allows a user to edit censuses with status submitted'),
    ),
    'can mark census tabs resubmit and reviewed' => array(
      'title' => t('can mark all censuses tabs resubmit and reviewed and can mark census review complete'),
      'description' => t('Allows a user to mark census tabs as resubmit and reviewed and can mark census review complete'),
    ),
    'can mark census tabs as complete' => array(
      'title' => t('can mark census tabs as complete'),
      'description' => t('Allows a user to mark census tabs as complete'),
    ),
    'can certify census as complete' => array(
      'title' => t('Can certify a census is complete'),
      'description' => t('Allows a user to access the certify field if the census has a status of complete this moves the census to submitted'),
    ),
    'can edit magic census fields' => array(
      'title' => t('can edit magic census fields'),
      'description' => t('can edit magic census fields'),
    ),

  );
}

/**
 * hook_block_view_alter()
 */
function nul_census_custom_block_view_alter(&$data, $block) {
  // for the blocks that show the content tabs for the census or parent census pass correct contextual filters
  if ($block->delta == 'census_tab_menu-block' || $block->delta == 'census_tab_menu-block_1') {
    $displays = array(
      'census_tab_menu-block_1' => 'block_1',
      'census_tab_menu-block' => 'block',
    );
    $censusTabsVocabulary = taxonomy_vocabulary_machine_name_load('census_tabs');
    $censusTabs = taxonomy_get_tree($censusTabsVocabulary->vid);
    $result = '';
    // IF not on parent census look up the id of the parent census to pass as an argument to the view
    $parentCensusNid = 0;
    if ($block->delta == 'census_tab_menu-block') {
      if (!empty($data['content']['#views_contextual_links_info']['views_ui']['view']->args[0])) {
        $currentNid = $data['content']['#views_contextual_links_info']['views_ui']['view']->args[0];
        $currentNode = node_load($currentNid);
        if (!empty($currentNode->field_parent_census[LANGUAGE_NONE][0]['target_id'])) {
          $parentCensusNid = $currentNode->field_parent_census[LANGUAGE_NONE][0]['target_id'];
          $result = "<a href='/node/{$parentCensusNid}'><div class='parentCensusLink tab field-content tabType'>Contact Information</a></div>";
        }
      }
    }
    if ($parentCensusNid == 0) {
      if ($block->delta == 'census_tab_menu-block_1') {
        // when on parent census add contact information tab
        if (arg(1) > 0) {
          $currentNode = node_load(arg(1));
          if (!empty($currentNode->type) && $currentNode->type == 'census') {
            $parentCensusId = arg(1);
            $result = "<a href='/node/{$parentCensusId}'><div class='parentCensusLink tab field-content tabType'>Contact Information</a></div>";
          }
        }
        // checks if on a census tab in create mode and make census tab menu work from there
        if (
          arg(0) == 'node' &&
          arg(1) == 'add' &&
          !empty(arg(2)) &&
          arg(2) !== 'census' &&
          arg(3) >= 1) {
          $PCNid = arg(3);
          $arguments = array(arg(3));
          $result = "<a href='/node/{$PCNid}'><div class='parentCensusLink tab field-content tabType'>Contact Information</a></div>";
        }
      }
    }
    foreach ($censusTabs as $key => $object) {
      if ($parentCensusNid == 0) {
        // Checks if on a census tab in edit mode and make census tab menu work from there
        if (
        arg(0) == 'node' &&
        arg(1) == 'add' &&
        !empty(arg(2)) &&
        arg(3) >= 1) {
          if ($block->delta == 'census_tab_menu-block_1') {
            $arguments = array(arg(3));
          }
        }
      }
      $term = taxonomy_term_load($object->tid);
      if (!empty($term->field_content_type_machine_name[LANGUAGE_NONE][0]['value'])) {
        if (!empty($data['content']['#views_contextual_links_info']['views_ui']['view']->args)) {
          $arguments = $data['content']['#views_contextual_links_info']['views_ui']['view']->args;
        }
        $arguments[] = $term->field_content_type_machine_name[LANGUAGE_NONE][0]['value'];
        // machine names of content types have _ switch them to - to redirect properly
        $arguments[] = str_replace('_', '-', $term->field_content_type_machine_name[LANGUAGE_NONE][0]['value']);
        if ($parentCensusNid > 0) {
          $arguments[] = $parentCensusNid;
        }
        $view = views_get_view('census_tab_menu');
        if (!empty($view)) {
          $view->set_display($displays[$block->delta]);
          $view->set_arguments($arguments);
          $view->execute();
          if (!empty($view->preview($displays[$block->delta]))) {
            $result .= $view->preview($displays[$block->delta]);
          }
        }
      }
      if ($result !== '') {
        $data['content']['#markup'] = $result;
      }
    }
  }
}

/**
 * hook_node_update()
 */
function nul_census_custom_node_update($node) {
  // If updating a tab to complete check if its the last one for its census.
  // When all tabs are complete update census to complete
  $censusTab = nul_census_custom_searchTaxonomyByField('census_tabs', 'field_content_type_machine_name', $node->type);
  if (!empty($censusTab) && !empty($node->field_tab_status[LANGUAGE_NONE][0]['tid']) && !empty($node->original->field_tab_status[LANGUAGE_NONE][0]['tid'])) {
    // Make sure the status is changing
    if ($node->original->field_tab_status[LANGUAGE_NONE][0]['tid'] !== $node->field_tab_status[LANGUAGE_NONE][0]['tid']) {
      // Get statuses info
      $OGstatus = taxonomy_term_load($node->original->field_tab_status[LANGUAGE_NONE][0]['tid']);
      $status = taxonomy_term_load($node->field_tab_status[LANGUAGE_NONE][0]['tid']);
      // If changing from incomplete to complete
      if ($OGstatus->name == 'Incomplete' && $status->name == 'Complete') {
        $exceptThisType = $node->type;
        // if on tab check that all tabs are complete except the one you are on are complete
        $tabsCompleted = nul_census_custom_check_tab_statuses($node->field_parent_census[LANGUAGE_NONE][0]['target_id'], $exceptThisType, 'Complete');
        if (empty($tabsCompleted['notComplete'])) {
          if (!empty($node->field_parent_census[LANGUAGE_NONE][0]['target_id'])) {
            $completeCensusTerm = key(taxonomy_get_term_by_name('Complete', 'status_type_for_census'));
            // If so update census to be complete
            if ($completeCensusTerm) {
              $parentCensus = node_load($node->field_parent_census[LANGUAGE_NONE][0]['target_id']);
              $parentCensus->field_census_status[LANGUAGE_NONE][0]['tid'] = $completeCensusTerm;
              node_save($parentCensus);
            }
          }
        }
      }
    }
  }
  // AGH #11267 If census status changes to "completed" "Reviewed Complete" or "Submitted" send a notification email
  // If updating a census
  if ($node->type == 'census') {
    // if that census status field is populated
    if (!empty($node->field_census_status[LANGUAGE_NONE][0]['tid']) && !empty($node->original->field_census_status[LANGUAGE_NONE][0]['tid'])) {
      // and the status is not the same as it was originally (is being changed)
      if ($node->original->field_census_status[LANGUAGE_NONE][0]['tid'] !== $node->field_census_status[LANGUAGE_NONE][0]['tid']) {
        // look up the name of the status
        $term = taxonomy_term_load($node->field_census_status[LANGUAGE_NONE][0]['tid']);
        // check that the name is in the array of status we want to alert people of a status being changed to.
        if (!empty($term->name) && in_array($term->name, array('Complete', 'Reviewed Complete', 'Submitted'))) {
          $toAndFrom = nul_census_custom_get_emails_to_notify($node);
          // status has changed to Complete Approved or resubmit, we should email appropriate ppl
          $language = language_default();
          $params = array(
            'nid' => $node->nid,
            'status' => $term->name,
            'prev_status' => '',
            'title' => $node->title,
          );
          // get original status term name
          $ogStatusTerm = taxonomy_term_load($node->original->field_census_status[LANGUAGE_NONE][0]['tid']);
          if (!empty($ogStatusTerm->name)) {
            $params['prev_status'] = $ogStatusTerm->name;
          }
          drupal_mail('nul_census_custom', 'status_change', $toAndFrom['to'], $language, $params, $toAndFrom['from'], TRUE);
        }
      }
    }
  }
}

/**
 * hook_node_submit()
 */
function nul_census_custom_node_submit($node, $form, &$form_state) {
  // IF on parent census and survey is being certified as complete update census and all reated tabs to submitted
  if (!empty($node->field_survey_name_of_certifier[LANGUAGE_NONE][0]['value'])) {
    // check that all tabs are completed
    $tabsCompleted = nul_census_custom_check_tab_statuses($node->nid, '', 'Complete');
    if (empty($tabsCompleted['complete'])) {
      // If not all tabs are completed check that all tabs are submitted
      $tabsCompleted = nul_census_custom_check_tab_statuses($node->nid, '', 'Submitted');
    }
    if (!empty($tabsCompleted['complete']) && empty($tabsCompleted['notComplete'])) {
      // Updating census
      $submittedCensusTerm = key(taxonomy_get_term_by_name('Submitted', 'status_type_for_census'));
      if (!empty($submittedCensusTerm)) {
        $node->field_census_status['und'][0]['tid'] = $submittedCensusTerm;
      }
      // Updating all related tabs
      nul_census_custom_update_nodes_status_field($tabsCompleted['complete'], 'Submitted', 'tab');
    }
  }
}

/**
 * hook_node_insert()
 */
function nul_census_custom_node_insert($node) {
  // AGH #11267 Sends an email when a node of type census is created
  // TODO talk to NUL about what info they want in this email. Is link enough? also who should the email go to?
  if ($node->type == 'census') {
    $language = language_default();
    $params = array(
      'nid' => $node->nid,
    );
    $toAndFrom = nul_census_custom_get_emails_to_notify($node);
    drupal_mail('nul_census_custom', 'census_created', $toAndFrom['to'], $language, $params, $toAndFrom['from'], TRUE);
  }
}

/**
 * hook_mail()
 */
function nul_census_custom_mail($key, &$message, $params) {
  global $base_url;
  switch ($key) {
    case 'status_change':
      $link = $base_url . '/node/' . $params['nid'];
      $message['subject'] = "{$params['title']} Status Changed to {$params['status']}";
      $message['body'][] = "'{$params['title']}' Status Changed to {$params['status']} from {$params['prev_status']} see link below to visit this census: $link";
      drupal_set_message(t('Status Change email sent'), 'success');
      break;

    case 'census_created':
      $link = $base_url . '/node/' . $params['nid'];
      $message['subject'] = "Census Created nid: {$params['nid']}";
      $message['body'][] = "Census Created nid: {$params['nid']} visit at $link";
      drupal_set_message(t('Census Created email sent'), 'success');
      break;

    default:
      break;
  }
}

function nul_census_custom_node_validate($node, $form, &$form_state) {
  $tabTermDetails = nul_census_custom_searchTaxonomyByField('census_tabs', 'field_content_type_machine_name', $node->type);
  if ($tabTermDetails) {
    // Make sure percentages add up to 100
    if ($node->type == 'service_areas') {
      $raceFields = array(
        'field_service_area_white',
        'field_service_area_hispanic',
        'field_service_area_asian_am',
        'field_service_area_native_am',
        'field_service_area_african_am',
        'field_service_area_other',
      );
      if (!empty($form['field_service_areas'][LANGUAGE_NONE])) {
        foreach ($form['field_service_areas'][LANGUAGE_NONE] as $key => $paragraph) {
          $totalPercentage = 0;
          foreach ($raceFields as $key2 => $fieldName) {
            if (!empty($paragraph[$fieldName][LANGUAGE_NONE][0]['value']['#value'])) {
              $totalPercentage = $totalPercentage + $paragraph[$fieldName][LANGUAGE_NONE][0]['value']['#value'];
            }
          }
          if ($totalPercentage != 100 && $totalPercentage > 0) {
            foreach ($raceFields as $key3 => $field) {
              form_set_error('field_service_areas][' . LANGUAGE_NONE . '][' . $key . '][' . $field, t('The numbers in the Composition % column for each Service Areas Race field must add up to 100'));
            }

          }
        }
      }
    }

    // AGH #11854 enforce that field_program_housing_fixed and field_program_housing_adjustable add up to 100%
    if ($node->type == 'program_housing') {
      $totalHousing = 0;
      $housingFieldsToTotal = array(
        'field_program_housing_adjustable',
        'field_program_housing_fixed',
      );
      foreach ($housingFieldsToTotal as $key => $field) {
        if (!empty($node->{$field}[LANGUAGE_NONE][0]['value'])) {
          $totalHousing = $totalHousing + $node->{$field}[LANGUAGE_NONE][0]['value'];
        }
      }
      if ($totalHousing != 100 && $totalHousing > 0) {
        form_set_error('field_program_housing_adjustable', t('"Percent of fixed rate mortgages" and "Percent of adjustable rate mortgages" must add up to 100%'));
        form_set_error('field_program_housing_fixed');
      }
    }

    // Validate that this is the only tab of this type for this parent census (do not let ppl create duplicate tabs)
    // check if there is an existing node of the same content type with the same parent census
    // search for node of that type AND parent census with NID passed to the function
    $query = new EntityFieldQuery();
    $results = $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', $node->type)
      ->fieldCondition('field_parent_census', 'target_id', $node->field_parent_census[LANGUAGE_NONE][0]['target_id'])
      ->execute();
    // Do not allow node with this parent census of this type to be saved unless
    $allowParentCensus = FALSE;
    // creating tab for the first time
    if (empty($results)) {
      $allowParentCensus = TRUE;
    }
    // there is only one tab and it is this one
    if (!empty($results['node']) && count($results['node']) == 1 && key($results['node']) == $node->nid) {
      $allowParentCensus = TRUE;
    }
    if ($allowParentCensus == FALSE) {
      form_set_error('parent_census', t('A tab of this type already exists for this census. Please update that tab instead'));
    }
  }
  // TODO do not let user create duplicate census
}

/**
 * Implements hook_node_access().
 */
function nul_census_custom_node_access($node, $op, $account) {
  // TODO break this out based on $op
  if (!empty($node->type) && !empty($node->nid)) {
    $nodeType = nul_census_custom_get_census_part($node->type);
    if (!empty($nodeType)) {
      switch ($nodeType) {
        case 'census':
          $affiliateOfNode = nul_census_custom_get_affiliate_from_node($node->nid, 'census');
          if (!empty($node->field_census_status[LANGUAGE_NONE][0]['tid'])) {
            $perms = nul_census_custom_check_status_permisions($node->field_census_status[LANGUAGE_NONE][0]['tid'], 'census', $node->nid);
          }
          break;

        case 'programs':
          // If on a program check for a parent census
          if (!empty($node->field_parent_census[LANGUAGE_NONE][0]['target_id'])) {
            $affiliateOfNode = nul_census_custom_get_affiliate_from_node($node->field_parent_census[LANGUAGE_NONE][0]['target_id'], 'census', $node->nid);
          }
          // if no parent census available check if its in the url ( this would be the case on a new program)
          elseif (!empty(arg(3))) {
            $affiliateOfNode = nul_census_custom_get_affiliate_from_node(arg(3), 'census');
          }

          $contentType = taxonomy_term_load($node->field_program_area[LANGUAGE_NONE][0]['tid'])->field_content_type[LANGUAGE_NONE][0]['value'];
          $programDetailTab = nul_census_custom_get_status_of_programs_parent_details_tab($contentType, $node->field_parent_census[LANGUAGE_NONE][0]['target_id']);

          // Check if there is a tab status
          if (!empty($programDetailTab->field_tab_status[LANGUAGE_NONE][0]['tid'])) {
            $perms = nul_census_custom_check_status_permisions($programDetailTab->field_tab_status[LANGUAGE_NONE][0]['tid'], 'tab', $node->nid);
          }
          // If there is no tab status set the status to be incomplete
          else {
            $perms = nul_census_custom_check_status_permisions('Incomplete', 'tab', $node->nid);
          }
          break;

        case 'tab':
          // tab in create mode
          if (!empty(arg(3))) {
            $affiliateOfNode = nul_census_custom_get_affiliate_from_node(arg(3), 'census');
          }
          if (!empty($node->field_parent_census[LANGUAGE_NONE][0]['target_id'])) {
            $affiliateOfNode = nul_census_custom_get_affiliate_from_node($node->field_parent_census[LANGUAGE_NONE][0]['target_id'], 'census');
          }
          if (!empty($node->field_tab_status[LANGUAGE_NONE][0]['tid'])) {
            $perms = nul_census_custom_check_status_permisions($node->field_tab_status[LANGUAGE_NONE][0]['tid'], 'tab', $node->nid);
          }
          else {
            $perms = nul_census_custom_check_status_permisions('Incomplete', 'tab', $node->nid);
          }
          break;

        default:
          # code...
          break;
      }
      if (!empty($affiliateOfNode)) {
        if (user_access('edit all affiliate censuses', $account)) {
          return NODE_ACCESS_ALLOW;
        }
        elseif (user_access('edit own affiliate censuses', $account)) {
          // Get affiliate for user
          $userAffiliate = nul_census_custom_get_affiliate_from_user($account->uid);
          // if its your census you can view and edit
          if (!empty($perms) && $affiliateOfNode == $userAffiliate && $perms['canEdit'] == TRUE) {
            watchdog('nul_census_custom', 'node %affiliateOfNode user %userAffiliate', array('%affiliateOfNode' => $affiliateOfNode, '%userAffiliate' => $userAffiliate), WATCHDOG_NOTICE, $link = NULL);
            // Grant access to users with the right permission.
            return NODE_ACCESS_ALLOW;
          }
          // if its a census with the status "Reviewed Complete" you can view
          elseif (!empty($perms) && $affiliateOfNode != $userAffiliate && $perms['canView'] == TRUE && $op == 'view') {
            return NODE_ACCESS_ALLOW;
          }
          else {
            return NODE_ACCESS_DENY;
          }
        }
        else {
          // Deny access to users without the permission.
          return NODE_ACCESS_DENY;
        }
      }
    }
    return NODE_ACCESS_IGNORE;
  }
  // This function has nothing to say about
  // all other node access operation and all
  // other node types.
  return NODE_ACCESS_IGNORE;
}

/**
 * [nul_census_custom_menu description]
 * @return [type] [description]
 */
function nul_census_custom_menu() {
  $items['admin/config/nul_census_custom'] = array(
    'title' => 'NUL Census Custom',
    'description' => 'Adjust NUL Census Settings',
    // 'position' => 'right',
    // 'weight' => '-10',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('can edit magic census fields'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/nul_census_custom/settings'] = array(
    'title' => 'NUL Census Custom Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nul_census_custom_settings_form'),
    'access arguments' => array('can edit magic census fields'),
    // 'type' => MENU_NORMAL_ITEM,
    'file' => 'nul_census_custom.admin.inc',
    'file path' => drupal_get_path('module', 'nul_census_custom'),
  );

  return $items;
}
