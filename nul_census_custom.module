<?php

/**
 * Search Taxonomy by field on the taxonomy
 * @param  str $vocabMachineName  machine name of the vocabulary
 * @param  str $fieldName         name of field to search
 * @param  str $valueOfField      value to match on
 * @return obj                    term object
 */
function nul_census_custom_searchTaxonomyByField($vocabMachineName, $fieldName, $valueOfField) {
  $term = NULL;
  $query = new EntityFieldQuery();
  $vocabulary = taxonomy_vocabulary_machine_name_load($vocabMachineName);
  $query->entityCondition('entity_type', 'taxonomy_term')
    ->propertyCondition('vid', $vocabulary->vid)
    ->fieldCondition($fieldName, 'value', $valueOfField);
  $terms = $query->execute();
  if (!empty($terms['taxonomy_term'])) {
    foreach ($terms['taxonomy_term'] as $key => $termDetails) {
      $term = taxonomy_term_load($termDetails->tid);
    }
  }
  return $term;
}

/**
 * hook_node_view()
 */
function nul_census_custom_node_view($node, $view_mode, $langcode) {
  if ($node->type !== 'test_clean_census' && !empty($node->type)) {
    // If on emergency_relief_activities view mode run this js to fix up table styling
    if ($node->type == 'emergency_relief_activities') {
      drupal_add_js(drupal_get_path('module', 'nul_census_custom') . '/js/formFix.js');
    }
    // lcheck if the content type is in the taxonomy for census tabs
    $termDetails = nul_census_custom_searchTaxonomyByField('census_tabs', 'field_content_type_machine_name', $node->type);
    // TODO delete this... these error messages this is really just for debugging while developing
    if (!$termDetails) {
      if ($node->type == 'test_clean_census') {
        drupal_set_message(t('Main Census Node'), 'notice');
      }
      else {
        drupal_set_message(t('Not a Census Tab or unpopulated content type machine name on the taxonomy term'), 'error');
      }
    }
    if ($termDetails) {
      // Add css file to tab in view mode
      $form['#attached']['css'] = array(
        drupal_get_path('module', 'nul_census_custom') . '/css/editForm.css',
      );
      // Check permissions, if do not have permission to edit complete tabs hide edit button
      if (!empty($node->field_tab_status[LANGUAGE_NONE][0]['taxonomy_term']->name) && $node->nid == arg(1) && $node->type !== 'test_clean_census') {
        $canEdit = nul_census_custom_check_tabstatus_permisions($node->field_tab_status[LANGUAGE_NONE][0]['taxonomy_term']->name);
        if (!$canEdit) {
          drupal_add_js(drupal_get_path('module', 'nul_census_custom') . '/js/hideEdit.js');
          drupal_set_message("You do not have permission to edit this content at this stage", 'error');
        }
      }
    }
  }
}

/**
 * hook_form_alter()
 */
function nul_census_custom_form_alter(&$form, &$form_state, $form_id) {
  // float save to the bottom
  if (!empty($form['#node_edit_form']) && $form['#node_edit_form'] == TRUE) {
    $form['actions']['#weight'] = 10000;
  }
  // Setting up new censuss
  if (!empty($form['#node']->type)) {
    // TODO uncomment if below to hide parent census field
    // if (!empty($form['field_parent_census'])) {
    //   $form['field_parent_census']['#type'] = 'hidden';
    // }
    // Add css file to tab in edit mode
    $form['#attached']['css'] = array(
      drupal_get_path('module', 'nul_census_custom') . '/css/editForm.css',
    );
    if (arg(0) == 'node' && arg(1) == 'add' && arg(3) >= 1) {
      if (!empty(arg(2)) && arg(2) == 'test-clean-census') {
        $year = date("Y");
        //TODO look up contact org name of arg(3) and print instead of id
        // Update and disable title field
        $form['title']['#default_value'] = arg(3) . " " . $year . " Census";
        $form['title']['#disabled'] = TRUE;
        // Update Year field and hide
        $form['field_year'][LANGUAGE_NONE][0]['value']['#default_value'] = $year;
        $form['field_year']['#type'] = 'hidden';
        // Update affliate field and hide it
        $form['field_affiliate_'][LANGUAGE_NONE][0]['value']['#default_value'] = arg(3);
        $form['field_affiliate_']['#type'] = 'hidden';
      }
      else {
        // Setting tab status to be incomplete since we are creating and we cant set default on the field since we can't export taxonomy terms with features
        if (!empty($form['field_tab_status'][LANGUAGE_NONE]['#options']) && array_search("Incomplete", $form['field_tab_status'][LANGUAGE_NONE]['#options'])) {
          $form['field_tab_status'][LANGUAGE_NONE]['#default_value'][0] = array_search("Incomplete", $form['field_tab_status'][LANGUAGE_NONE]['#options']);
        }
        // Get the name of the content type
        $types = node_type_get_names();
        if (!empty($types[$form['type']['#value']])) {
          if (!empty($form['field_parent_census'][LANGUAGE_NONE]['#options'][arg(3)])) {
            $form['field_parent_census'][LANGUAGE_NONE]['#default_value'] = arg(3);
          }
          if (!empty($form['field_program_area'][LANGUAGE_NONE]['#options'])) {
            foreach ($form['field_program_area'][LANGUAGE_NONE]['#options'] as $tid => $option) {
              if ($tid !== '_none') {
                $taxonomy_term = taxonomy_term_load($tid);
                if (!empty($taxonomy_term->field_content_type[LANGUAGE_NONE][0]['value']) && $taxonomy_term->field_content_type[LANGUAGE_NONE][0]['value'] == arg(4)) {
                  $form['field_program_area'][LANGUAGE_NONE]['#default_value'][] = $tid;
                }
              }
            }
          }
          // Check that its a tab content type by looking for the name in the vocabulary
          $vocabulary = taxonomy_vocabulary_machine_name_load('census_tabs');
          $censusTabs = taxonomy_get_tree($vocabulary->vid);
          foreach ($censusTabs as $key => $values) {
            if ($values->name == $types[$form['type']['#value']]) {
              // Set title to be name of content type
              $form['title']['#default_value'] = $types[$form['type']['#value']];
              $form['title']['#disabled'] = TRUE;
            }
          }
        }
      }
    }
    // Limit options for Program Type and Services Provided based on Program Area
    // Check we are on a content type of programs
    if (!empty($form['type']['#value']) && $form['type']['#value'] == 'programs') {
      $programArea = 0;
      // If in create mode check for program area default value as it has not been saved
      if (!empty($form['field_program_area'][LANGUAGE_NONE]['#default_value'])) {
        $programArea = $form['field_program_area'][LANGUAGE_NONE]['#default_value'];
      }
      // If in edit mode check for program area value
      if (!empty($form['field_program_area'][LANGUAGE_NONE]['#entity']->field_program_area[LANGUAGE_NONE][0]['tid'])) {
        $programArea = $form['field_program_area'][LANGUAGE_NONE]['#entity']->field_program_area[LANGUAGE_NONE][0]['tid'];
      }
      // If you find a program area
      if ($programArea > 0) {
        // Check the following fields options
        $fieldsToLimitByProgramArea = array(
          'field_service_provided',
          'field_program_types',
        );
        foreach ($fieldsToLimitByProgramArea as $key => $fieldName) {
          if (!empty($form[$fieldName][LANGUAGE_NONE]['#options'])) {
            foreach ($form[$fieldName][LANGUAGE_NONE]['#options'] as $tid => $name) {
              if ($tid > 0) {
                $term = taxonomy_term_load($tid);
                if ($term->field_program_area[LANGUAGE_NONE][0]['tid'] !== $programArea) {
                  unset($form[$fieldName][LANGUAGE_NONE]['#options'][$tid]);
                }
              }
            }
          }
        }
        // set services provided and program areas available here

      }
    }

    // make tooltips for all fields (most important for table fields)
    foreach ($form as $key => $value) {
      if (substr($key, 0, 6) == 'field_') {
        if (!empty($form[$key][LANGUAGE_NONE][0]['value']['#title'])) {
          $form[$key]['#attributes']['title'] = $form[$key][LANGUAGE_NONE][0]['value']['#title'];
        }
      }
    }
    // check if the content type is in the taxonomy for census tabs
    $termDetails = nul_census_custom_searchTaxonomyByField('census_tabs', 'field_content_type_machine_name', $form['#node']->type);
    if (!$termDetails) {
      drupal_set_message(t('Not a Census Tab or unpopulated content type machine name on the taxonomy term'), 'error');
    }
    if ($termDetails) {
      // hide title field on cenus tab content types in edit mode
      // $form['title']['#disabled'] = TRUE;
      // $form['title']['#type'] = 'hidden';
      // load totaling js
      drupal_add_js(drupal_get_path('module', 'nul_census_custom') . '/js/totaling.js');

      if (!empty($form['#node']->field_tab_status) && !empty($form['field_tab_status'][LANGUAGE_NONE]['#options'][$form['#node']->field_tab_status[LANGUAGE_NONE][0]['tid']]) && substr($form_id, 0, 7) !== 'comment') {
        $canEdit = nul_census_custom_check_tabstatus_permisions($form['field_tab_status'][LANGUAGE_NONE]['#options'][$form['#node']->field_tab_status[LANGUAGE_NONE][0]['tid']]);
        // If can't edit redirect to node in view mode.
        if (!$canEdit) {
          if (arg(0) == 'node' && arg(2) == 'edit') {
            drupal_goto(arg(0) . '/' . arg(1));
          }
          else {
            drupal_goto('403');
          }
        }
      }
    }
  }
}

/**
 * Implements hook_permission().
 */
function nul_census_custom_permission() {
  // TODO add permissions for tabs view/edit based on status
  return array(
    'edit census tabs with status submitted reviewed complete or review complete' => array(
      'title' => t('Edit census tabs with status submitted, complete, reviewed or review complete'),
      'description' => t('Allows a user to edit census tabs with status complete, submitted, reviewed or review complete.'),
    ),
    'edit census tabs with status resubmit' => array(
      'title' => t('Edit census tabs with status resubmit'),
      'description' => t('Allows a user to edit census tabs with status rresubmit.'),
    ),
  );
}

/**
 * Check permissions of user and status of tab
 * @param  string $status status of tab
 * @return boolean        can they edit or not
 */
function nul_census_custom_check_tabstatus_permisions($status) {
  global $user;
  // IF user is an administrator they can edit whatever always
  if (in_array('administrator', $user->roles)) {
    $canEdit = TRUE;
  }
  // If user is not admin check permissions
  if (!in_array('administrator', $user->roles)) {
    switch ($status) {
      case 'Incomplete':
        $canEdit = TRUE;
        break;

      case 'Complete':
        if (user_access('edit census tabs with status submitted reviewed complete or review complete')) {
          $canEdit = TRUE;
        }
        else {
          $canEdit = FALSE;
        }
        break;

      case 'Resubmit':
        if (user_access('edit census tabs with status resubmit')) {
          $canEdit = TRUE;
        }
        else {
          $canEdit = FALSE;
        }
        break;

      case 'Reviewed':
        if (user_access('edit census tabs with status submitted reviewed complete or review complete')) {
          $canEdit = TRUE;
        }
        else {
          $canEdit = FALSE;
        }
        break;

      case 'Reviewed Complete':
        if (user_access('edit census tabs with status submitted reviewed complete or review complete')) {
          $canEdit = TRUE;
        }
        else {
          $canEdit = FALSE;
        }
        break;

      case 'Submitted':
        if (user_access('edit census tabs with status submitted reviewed complete or review complete')) {
          $canEdit = TRUE;
        }
        else {
          $canEdit = FALSE;
        }
        break;

      default:
        $canEdit = FALSE;

        break;
    }
  }
  return $canEdit;
}

function nul_census_custom_block_view_alter(&$data, $block) {
  if ($block->delta == 'contact_information-block') {
    $censusTabsVocabulary = taxonomy_vocabulary_machine_name_load('census_tabs');
    $censusTabs = taxonomy_get_tree($censusTabsVocabulary->vid);
    $result = '';
    foreach ($censusTabs as $key => $object) {
      $term = taxonomy_term_load($object->tid);
      if (!empty($term->field_content_type_machine_name[LANGUAGE_NONE][0]['value'])) {
        if (!empty($data['content']['#views_contextual_links_info']['views_ui']['view']->args)) {
          $arguments = $data['content']['#views_contextual_links_info']['views_ui']['view']->args;
          $arguments[] = $term->field_content_type_machine_name[LANGUAGE_NONE][0]['value'];
          $view = views_get_view('contact_information');
          $view->set_display('block');
          $view->set_arguments($arguments);
          $view->execute();
          $result .= $view->preview('block');
        }
      }
      $data['content']['#markup'] = $result;
    }
  }
}
