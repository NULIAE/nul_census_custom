<?php

module_load_include('inc', 'nul_census_custom', './nul_census_custom.utils');

/**
 * hook_preprocess_views_view()
 */
function nul_census_custom_preprocess_views_view(&$vars) {
  $view = $vars['view'];
  // Make sure it's the correct view
  if ($view->name == 'full_census') {
    // add needed stylesheet
    drupal_add_css(drupal_get_path('module', 'nul_census_custom') . '/css/editForm.css');
  }
}

/**
 * hook_node_view()
 */
function nul_census_custom_node_view($node, $view_mode, $langcode) {
  if (!empty($node->type)) {
    if ($node->type == 'census') {
      // Check permissions, if do not have permission to edit census hide edit button
      if (!empty($node->field_census_status[LANGUAGE_NONE][0]['taxonomy_term']->name) && $node->nid == arg(1)) {
        $perms['canEdit'] = nul_census_custom_check_status_permisions($node->field_census_status[LANGUAGE_NONE][0]['taxonomy_term']->name, 'census');
        if (!$perms['canEdit']) {
          drupal_add_js(drupal_get_path('module', 'nul_census_custom') . '/js/hideEdit.js');
          drupal_set_message("You do not have permission to edit this content at this stage", 'error');
        }
      }
      // If all tabs are reviewed and census is submitted and user has permission add button to mark census as review complete
      // TODO THIS IS A HACKY WORKAROUND NOT TO USE AJAX SHOULD BE DONE USING AJAX WHEN TIME ALLOWS
      if (!empty($node->field_census_status[LANGUAGE_NONE][0]['taxonomy_term']->name) && $node->field_census_status[LANGUAGE_NONE][0]['taxonomy_term']->name == 'Submitted' && user_access('can mark census tabs resubmit and reviewed')) {
        // check that all tabs have status reviewed
        $tabsCompleted = nul_census_custom_check_tab_statuses($node->nid, '', 'Reviewed');
        if (!empty($tabsCompleted['complete']) && empty($tabsCompleted['notComplete'])) {
          drupal_add_js(array('nul_census_custom' => array('censuspart' => 'census')), array('type' => 'setting'));
          drupal_add_js(array('nul_census_custom' => array('nid' => $node->nid)), array('type' => 'setting'));
          drupal_add_js(drupal_get_path('module', 'nul_census_custom') . '/js/addButtons.js');
          if (arg(0) == 'node' && arg(1) > 0 && in_array(arg(2), array('ReviewComplete'))) {
            $censusCompleted = array($node->nid => 'does not matter');
            nul_census_custom_update_nodes_status_field($censusCompleted, 'Reviewed Complete', 'census');
            // Updating all related tabs
            nul_census_custom_update_nodes_status_field($tabsCompleted['complete'], 'Reviewed Complete', 'tab');
            drupal_set_message('Census saved as Review Complete', 'notice');
            drupal_goto("node/" . arg(1));
          }
        }
      }
    }
    if ($node->type !== 'census') {
      // If on emergency_relief_activities view mode run this js to fix up table styling
      if ($node->type == 'emergency_relief_activities') {
        drupal_add_js(drupal_get_path('module', 'nul_census_custom') . '/js/formFix.js');
      }
      // check if the content type is in the taxonomy for census tabs
      $termDetails = nul_census_custom_searchTaxonomyByField('census_tabs', 'field_content_type_machine_name', $node->type);
      // TODO delete this... these error messages this is really just for debugging while developing
      if (!$termDetails) {
        drupal_set_message(t('Not a Census Tab or unpopulated content type machine name on the taxonomy term'), 'error');
      }
      // IF on a census tab
      if ($termDetails) {
        // IF on tab with status submitted and user has proper permissions add mark reviewed and resubmit buttons
        nul_census_custom_button_to_update_status($node->field_tab_status[LANGUAGE_NONE][0]['taxonomy_term']->name, 'Submitted', 'can mark census tabs resubmit and reviewed', 'tab', $node->nid, $node->field_parent_census[LANGUAGE_NONE][0]['target_id'], array('Reviewed', 'Resubmit'));

        // Add css file to tab in view mode
        $form['#attached']['css'] = array(
          drupal_get_path('module', 'nul_census_custom') . '/css/editForm.css',
        );
        // Check permissions, if do not have permission to edit complete tabs hide edit button
        if (!empty($node->field_tab_status[LANGUAGE_NONE][0]['taxonomy_term']->name) && $node->nid == arg(1) && $node->type !== 'census') {
          $perms = nul_census_custom_check_status_permisions($node->field_tab_status[LANGUAGE_NONE][0]['taxonomy_term']->name, 'tab');
          if ($perms['canResubmit'] && $node->field_tab_status[LANGUAGE_NONE][0]['taxonomy_term']->name == 'Resubmit') {
            // Add and process resubmit button
            nul_census_custom_button_to_update_status($node->field_tab_status[LANGUAGE_NONE][0]['taxonomy_term']->name, 'Resubmit', 'edit census tabs with status resubmit', 'resubmit', $node->nid, $node->field_parent_census[LANGUAGE_NONE][0]['target_id'], array('Submitted'));
          }
          if (!$perms['canEdit']) {
            drupal_add_js(drupal_get_path('module', 'nul_census_custom') . '/js/hideEdit.js');
            drupal_set_message("You do not have permission to edit this content at this stage", 'error');
          }
        }
      }
    }
  }
}

/**
 * hook_form_alter()
 */
function nul_census_custom_form_alter(&$form, &$form_state, $form_id) {
  // If on Census node
  if ($form_id == 'census_node_form') {
    // Disable certifier field
    $form['field_survey_name_of_certifier']['#disabled'] = TRUE;
    $completeTerm = array_search('Complete', $form['field_census_status'][LANGUAGE_NONE]['#options']);
    // Enable certifier field if user has permissions and the census is complete
    if (!empty($form['field_survey_name_of_certifier']) &&
    user_access('can certify census as complete') &&
    !empty($form['field_census_status'][LANGUAGE_NONE]['#entity']->field_census_status[LANGUAGE_NONE][0]['tid']) &&
    $form['field_census_status'][LANGUAGE_NONE]['#entity']->field_census_status[LANGUAGE_NONE][0]['tid'] == $completeTerm) {
      $form['field_survey_name_of_certifier']['#disabled'] = FALSE;
    }
    // if user does not have access to magic fields disable them so user cannot change them
    $fieldsToHideAndDisableOnCensus = array(
      'title',
      'field_year',
      'field_affiliate_',
      'field_census_status',
    );
    nul_census_custom_hide_and_disable_fields($form, $fieldsToHideAndDisableOnCensus);

    // IF ON A CENSUS IN CREATE MODE
    if (
    arg(0) == 'node' &&
    arg(1) == 'add' &&
    !empty(arg(2)) &&
    arg(2) == 'census' &&
    arg(3) >= 1) {
      // set year to be current year
      $year = date("Y");
      //TODO look up contact org name of arg(3) and print instead of id
      // TODO Update title field to be the name of the affliate and hide
      $form['title']['#default_value'] = arg(3) . " " . $year . " Census";

      // Update Year field and disable
      $form['field_year'][LANGUAGE_NONE][0]['value']['#default_value'] = $year;
      // Update affliate field and disable
      $form['field_affiliate_'][LANGUAGE_NONE][0]['value']['#default_value'] = arg(3);
      // set default status to inclomplete
      $defaultStatus = array_search('Incomplete', $form['field_census_status'][LANGUAGE_NONE]['#options']);
      $form['field_census_status'][LANGUAGE_NONE]['#default_value'][] = $defaultStatus;
    }
  }
  // IF ON PROGRAMS TAB
  $fieldsToHideAndDisableOnProgram = array(
    'field_parent_census',
    'field_program_area',
  );
  nul_census_custom_hide_and_disable_fields($form, $fieldsToHideAndDisableOnProgram);
  // set parent census based on value in url
  if (!empty($form['field_parent_census'][LANGUAGE_NONE]['#options'][arg(3)])) {
    $form['field_parent_census'][LANGUAGE_NONE]['#default_value'] = arg(3);
  }
  // set program area if needed
  if (!empty($form['field_program_area'][LANGUAGE_NONE]['#options'])) {
    foreach ($form['field_program_area'][LANGUAGE_NONE]['#options'] as $tid => $option) {
      if ($tid !== '_none') {
        $taxonomy_term = taxonomy_term_load($tid);
        if (!empty($taxonomy_term->field_content_type[LANGUAGE_NONE][0]['value']) && $taxonomy_term->field_content_type[LANGUAGE_NONE][0]['value'] == arg(4)) {
          $form['field_program_area'][LANGUAGE_NONE]['#default_value'][] = $tid;
        }
      }
    }
  }
  // Limit options for Program Type and Services Provided based on Program Area
  // Check we are on a content type of programs
  if (!empty($form['type']['#value']) && $form['type']['#value'] == 'programs') {
    $programArea = 0;
    // If in create mode check for program area default value as it has not been saved
    if (!empty($form['field_program_area'][LANGUAGE_NONE]['#default_value'])) {
      $programArea = $form['field_program_area'][LANGUAGE_NONE]['#default_value'][0];
    }
    // If in edit mode check for program area value
    if (!empty($form['field_program_area'][LANGUAGE_NONE]['#entity']->field_program_area[LANGUAGE_NONE][0]['tid'])) {
      $programArea = $form['field_program_area'][LANGUAGE_NONE]['#entity']->field_program_area[LANGUAGE_NONE][0]['tid'];
    }
    // If you find a program area
    if ($programArea > 0) {
      // Check the following fields options
      $fieldsToLimitByProgramArea = array(
        'field_service_provided',
        'field_program_types',
      );
      foreach ($fieldsToLimitByProgramArea as $key => $fieldName) {
        if (!empty($form[$fieldName][LANGUAGE_NONE]['#options'])) {
          foreach ($form[$fieldName][LANGUAGE_NONE]['#options'] as $optionId => $name) {
            if ($optionId > 0) {
              $term = taxonomy_term_load($optionId);
              if (intval($term->field_program_area[LANGUAGE_NONE][0]['tid']) !== intval($programArea)) {
                unset($form[$fieldName][LANGUAGE_NONE]['#options'][$optionId]);
              }
            }
          }
        }
      }
    }
  }
  // ON TABS IN EDIT  or CREATE MODE
  if (!empty($form['#node']->type)) {
    $censusTab = nul_census_custom_searchTaxonomyByField('census_tabs', 'field_content_type_machine_name', $form['#node']->type);
  }
  if (!empty($censusTab)) {
    if ($form['#node']->type . '_node_form' == $form_id) {
      // IF user does not have permission to edit this tab with this status redirect to home page
      if (!empty($form['#node']->field_tab_status) && !empty($form['field_tab_status'][LANGUAGE_NONE]['#options'][$form['#node']->field_tab_status[LANGUAGE_NONE][0]['tid']]) && substr($form_id, 0, 7) !== 'comment') {
        // TODO check this is working
        $perms = nul_census_custom_check_status_permisions($form['field_tab_status'][LANGUAGE_NONE]['#options'][$form['#node']->field_tab_status[LANGUAGE_NONE][0]['tid']], 'tab');
        // If can't edit redirect to node in view mode.
        if (!$perms['canEdit']) {
          if (arg(0) == 'node' && arg(2) == 'edit') {
            drupal_goto(arg(0) . '/' . arg(1));
          }
          else {
            drupal_goto('403');
          }
        }
      }
      // Add totaling js
      drupal_add_js(drupal_get_path('module', 'nul_census_custom') . '/js/totaling.js');
      // make tooltips for all fields (most important for table fields)
      foreach ($form as $key => $value) {
        if (substr($key, 0, 6) == 'field_') {
          if (!empty($form[$key][LANGUAGE_NONE][0]['value']['#title'])) {
            $form[$key]['#attributes']['title'] = $form[$key][LANGUAGE_NONE][0]['value']['#title'];
          }
        }
      }
      // float save to the bottom
      if (!empty($form['#node_edit_form']) && $form['#node_edit_form'] == TRUE) {
        $form['actions']['#weight'] = 10000;
      }
      // Add css file to tab in edit mode
      $form['#attached']['css'] = array(
        drupal_get_path('module', 'nul_census_custom') . '/css/editForm.css',
      );
      // if user does not have access to magic fields on tab disable them so user cannot change them
      $fieldsToHideAndDisableOnTab = array(
        'title',
        'field_parent_census',
        'field_tab_status',
        // 'field_program_area',
      );
      nul_census_custom_hide_and_disable_fields($form, $fieldsToHideAndDisableOnTab);
      // IF ON A TAB IN CREATE MODE
      if (
      arg(0) == 'node' &&
      arg(1) == 'add' &&
      !empty(arg(2)) &&
      arg(3) >= 1) {
        // Setting tab status to be incomplete since we are creating and we cant set default on the field since we can't export taxonomy terms with features
        if (!empty($form['field_tab_status'][LANGUAGE_NONE]['#options']) && array_search("Incomplete", $form['field_tab_status'][LANGUAGE_NONE]['#options'])) {
          $form['field_tab_status'][LANGUAGE_NONE]['#default_value'][0] = array_search("Incomplete", $form['field_tab_status'][LANGUAGE_NONE]['#options']);
        }
        // set parent census based on value in url
        if (!empty($form['field_parent_census'][LANGUAGE_NONE]['#options'][arg(3)])) {
          $form['field_parent_census'][LANGUAGE_NONE]['#default_value'] = arg(3);
        }
        if ($censusTab->name) {
          $form['title']['#default_value'] = $censusTab->name;
        }
      }
    }
  }
}

/**
 * hook_permission().
 */
function nul_census_custom_permission() {
  // TODO add permissions for tabs view/edit based on status
  return array(
    'view affiliate censuses' => array(
      'title' => t('View affiliate census and tabs'),
      'description' => t('Allows a user to edit census tabs with status complete, submitted, reviewed or review complete.'),
    ),
    'edit census tabs with status submitted reviewed complete or review complete' => array(
      'title' => t('Edit all census tabs with status submitted, complete, reviewed or review complete'),
      'description' => t('Allows a user to edit census tabs with status complete, submitted, reviewed or review complete.'),
    ),
    'edit census tabs with status resubmit' => array(
      'title' => t('Edit Affiliate census tabs with status resubmit'),
      'description' => t('Allows a user to edit census tabs with status rresubmit.'),
    ),
    'edit census with status complete' => array(
      'title' => t('Edit affiliates censuses with status complete and incomplete'),
      'description' => t('Allows a user to edit census with status complete'),
    ),
    'edit census with status submitted' => array(
      'title' => t('Edit All censuses with status submitted'),
      'description' => t('Allows a user to edit census with status submitted'),
    ),
    'can mark census tabs resubmit and reviewed' => array(
      'title' => t('can mark all censuses tabs resubmit and reviewed and can mark census review complete'),
      'description' => t('Allows a user to mark census tabs as resubmit and reviewed'),
    ),
    'can certify census as complete' => array(
      'title' => t('Can mark affiliates census as complete'),
      'description' => t('Allows a user to access the certify field if the census has a status of complete this moves the census to submitted'),
    ),
    'can edit magic census fields' => array(
      'title' => t('can edit magic census fields'),
      'description' => t('can edit magic census fields'),
    ),

  );
}

/**
 * hook_block_view_alter()
 */
function nul_census_custom_block_view_alter(&$data, $block) {
  // for the blocks that show the content tabs for the census or parent census pass correct contextual filters
  if ($block->delta == 'census_tab_menu-block' || $block->delta == 'census_tab_menu-block_1') {
    $displays = array(
      'census_tab_menu-block_1' => 'block_1',
      'census_tab_menu-block' => 'block',
    );
    $censusTabsVocabulary = taxonomy_vocabulary_machine_name_load('census_tabs');
    $censusTabs = taxonomy_get_tree($censusTabsVocabulary->vid);
    $result = '';
    // IF not on parent census look up the id of the parent census to pass as an argument to the view
    $parentCensusNid = 0;
    if ($block->delta == 'census_tab_menu-block') {
      if (!empty($data['content']['#views_contextual_links_info']['views_ui']['view']->args[0])) {
        $currentNid = $data['content']['#views_contextual_links_info']['views_ui']['view']->args[0];
        $currentNode = node_load($currentNid);
        if (!empty($currentNode->field_parent_census[LANGUAGE_NONE][0]['target_id'])) {
          $parentCensusNid = $currentNode->field_parent_census[LANGUAGE_NONE][0]['target_id'];
        }
      }
    }
    if ($parentCensusNid == 0) {
      // TODO Check if on a census tab in edit mode and make census tab menu work from there
      if (
        arg(0) == 'node' &&
        arg(1) == 'add' &&
        !empty(arg(2)) &&
        arg(3) >= 1) {
        if ($block->delta == 'census_tab_menu-block_1') {
          $arguments = array(arg(3));
        }
      }
    }
    foreach ($censusTabs as $key => $object) {
      if ($parentCensusNid == 0) {
        // TODO Check if on a census tab in edit mode and make census tab menu work from there
        if (
        arg(0) == 'node' &&
        arg(1) == 'add' &&
        !empty(arg(2)) &&
        arg(3) >= 1) {
          if ($block->delta == 'census_tab_menu-block_1') {
            $arguments = array(arg(3));
          }
        }
      }
      $term = taxonomy_term_load($object->tid);
      if (!empty($term->field_content_type_machine_name[LANGUAGE_NONE][0]['value'])) {
        if (!empty($data['content']['#views_contextual_links_info']['views_ui']['view']->args)) {
          $arguments = $data['content']['#views_contextual_links_info']['views_ui']['view']->args;
        }
        $arguments[] = $term->field_content_type_machine_name[LANGUAGE_NONE][0]['value'];
        // machine names of content types have _ switch them to - to redirect properly
        $arguments[] = str_replace('_', '-', $term->field_content_type_machine_name[LANGUAGE_NONE][0]['value']);
        if ($parentCensusNid > 0) {
          $arguments[] = $parentCensusNid;
        }
        $view = views_get_view('census_tab_menu');
        if (!empty($view)) {
          $view->set_display($displays[$block->delta]);
          $view->set_arguments($arguments);
          $view->execute();
          if (!empty($view->preview($displays[$block->delta]))) {
            $result .= $view->preview($displays[$block->delta]);
          }
        }
      }
      if ($result !== '') {
        $data['content']['#markup'] = $result;
      }
    }
  }
}

/**
 * hook_node_update()
 */
function nul_census_custom_node_update($node) {
  // AGH #11267 If census status changes to "completed" "approved" or "resubmit" send a notification email
  // If updating a census
  if ($node->type == 'census') {
    // if that census status field is populated
    if (!empty($node->field_census_status[LANGUAGE_NONE][0]['tid'])) {
      // and the status is not the same as it was originally (is being changed)
      if ($node->original->field_census_status[LANGUAGE_NONE][0]['tid'] !== $node->field_census_status[LANGUAGE_NONE][0]['tid']) {
        // look up the name of the status
        $term = taxonomy_term_load($node->field_census_status[LANGUAGE_NONE][0]['tid']);
        // check that the name is in the array of status we want to alert people of a status being changed to.
        if (!empty($term->name) && in_array($term->name, array('Complete', 'Approved', 'Resubmit'))) {

          // status has changed to Complete Approved or resubmit, we should email appropriate ppl
          $language = language_default();
          $params = array(
            'nid' => $node->nid,
            'status' => $term->name,
            'prev_status' => '',
            'title' => $node->title,
          );
          // get original status term name
          $ogStatusTerm = taxonomy_term_load($node->original->field_census_status[LANGUAGE_NONE][0]['tid']);
          if (!empty($ogStatusTerm->name)) {
            $params['prev_status'] = $ogStatusTerm->name;
          }
          drupal_mail('nul_census_custom', 'status_change', 'alice@aghstrategies.com', $language, $params, 'alice@aghstrategies.com', TRUE);
        }
      }
    }
  }
}

/**
 * hook_node_submit()
 */
function nul_census_custom_node_submit($node, $form, &$form_state) {
  // change status from incomplete to complete if all fake required fields are complete
  if (!empty($node->field_tab_status[LANGUAGE_NONE][0]['tid'])) {
    $currentTabStatus = taxonomy_term_load($node->field_tab_status[LANGUAGE_NONE][0]['tid']);
    if ($currentTabStatus->name == 'Incomplete') {
      // CHECK REQUIRED FIELDS
      $requiredToCompleteFieldsMachineNames = nul_census_custom_fake_required_fields();
      $allRequiredFieldsFilled = TRUE;
      foreach ($requiredToCompleteFieldsMachineNames as $machineName => $value) {
        if (!empty($node->{$machineName}) && empty($node->{$machineName}[LANGUAGE_NONE])) {
          $allRequiredFieldsFilled = FALSE;
        }
      }
      if ($allRequiredFieldsFilled) {
        $completeTerm = key(taxonomy_get_term_by_name('Complete', 'census_tab_status'));
        if (!empty($completeTerm)) {
          $node->field_tab_status[LANGUAGE_NONE][0]['tid'] = $completeTerm;
        }
        $exceptThisType = $node->type;
        // if on tab check that all tabs are complete except the one you are on are complete
        $tabsCompleted = nul_census_custom_check_tab_statuses($node->field_parent_census[LANGUAGE_NONE][0]['target_id'], $exceptThisType, 'Complete');
        if (empty($tabsCompleted['notComplete'])) {
          if (!empty($node->field_parent_census[LANGUAGE_NONE][0]['target_id'])) {
            $completeCensusTerm = key(taxonomy_get_term_by_name('Complete', 'status_type_for_census'));
            // If so update census to be complete
            if ($completeCensusTerm) {
              $parentCensus = node_load($node->field_parent_census[LANGUAGE_NONE][0]['target_id']);
              $parentCensus->field_census_status[LANGUAGE_NONE][0]['tid'] = $completeCensusTerm;
              node_save($parentCensus);
            }
          }
        }
      }
      else {
        $incompleteTerm = key(taxonomy_get_term_by_name('Incomplete', 'census_tab_status'));
        if (!empty($incompleteTerm)) {
          $node->field_tab_status[LANGUAGE_NONE][0]['tid'] = $incompleteTerm;
        }
      }
    }
  }
  // IF on parent census and survey is being certified as complete update census and all reated tabs to submitted
  if (!empty($node->field_survey_name_of_certifier[LANGUAGE_NONE][0]['value'])) {
    // check that all tabs are completed
    $tabsCompleted = nul_census_custom_check_tab_statuses($node->nid, '', 'Complete');
    if (!empty($tabsCompleted['complete']) && empty($tabsCompleted['notComplete'])) {
      // Updating census
      $submittedCensusTerm = key(taxonomy_get_term_by_name('Submitted', 'status_type_for_census'));
      if (!empty($submittedCensusTerm)) {
        $node->field_census_status['und'][0]['tid'] = $submittedCensusTerm;
      }
      // Updating all related tabs
      nul_census_custom_update_nodes_status_field($tabsCompleted['complete'], 'Submitted', 'tab');
    }
  }
}

/**
 * hook_node_insert()
 */
function nul_census_custom_node_insert($node) {
  // AGH #11267 Sends an email when a node of type census is created
  // TODO talk to NUL about what info they want in this email. Is link enough? also who should the email go to?
  if ($node->type == 'census') {
    $language = language_default();
    $params = array(
      'nid' => $node->nid,
    );
    drupal_mail('nul_census_custom', 'census_created', 'alice@aghstrategies.com', $language, $params, 'alice@aghstrategies.com', TRUE);
  }
}

/**
 * hook_mail()
 */
function nul_census_custom_mail($key, &$message, $params) {
  global $base_url;
  switch ($key) {
    case 'status_change':
      $link = $base_url . '/node/' . $params['nid'];
      $message['subject'] = "{$params['title']} Status Changed to {$params['status']}";
      $message['body'][] = "'{$params['title']}' Status Changed to {$params['status']} from {$params['prev_status']} see link below to visit this census: $link";
      drupal_set_message(t('Status Change email sent'), 'notice');
      break;

    case 'census_created':
      $link = $base_url . '/node/' . $params['nid'];
      $message['subject'] = "Census Created nid: {$params['nid']}";
      $message['body'][] = "Census Created nid: {$params['nid']} visit at $link";
      drupal_set_message(t('Census Created email sent'), 'notice');
      break;

    default:
      break;
  }
}

// function nul_census_custom_node_grants_alter(&$grants, $account, $op) {
//   print_r($grants); die();
// }
